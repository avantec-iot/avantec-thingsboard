{
  "alias": "html_attributes_cards",
  "name": "Entities Cards",
  "image": null,
  "description": null,
  "descriptor": {
    "type": "latest",
    "sizeX": 9,
    "sizeY": 4,
    "resources": [],
    "templateHtml": "",
    "templateCss": ".card-container {\n    width: 100%;\n    /*height: fit-content;*/ /*height: 100%;*/\n    \n    padding-left: inherit;\n    padding-right: inherit;\n    \n    /*box-sizing: border-box;*/\n    /*border: #696969 1px solid;*/\n    \n\t/* 要创建一个 flex 容器，只需要将一个 display: flex 属性添加到一个元素上。\n\t默认情况下，所有的直接子元素都被认为是 flex 项，并从左到右依次排列在一行中。\n\t如果 flex 项的宽度总和大于容器，那么 flex 项将按比例缩小，直到它们适应 flex 容器宽度 */\n\tdisplay: flex;\n\t/* flex-direction 决定主轴的方向 row(默认)|row-reverse|column|column-reverse*/\n\tflex-direction: row;\n\t/* flex-wrap决定当排列不下时是否换行以及换行的方式,nowrap(默认)|wrap|wrap-reverse */\n\tflex-wrap:wrap;\n\t/* flex-flow是lex-direction和flex-wrap的简写形式，如：row wrap|column wrap-reverse等。默认值为row nowrap，即横向排列 不换行 */\n\tflex-flow:row wrap;\n\t/* !当主轴沿水平方向时!justify-content,决定item在主轴上的对齐方式，可能的值有flex-start（默认），flex-end，center，space-between，space-around */\n\tjustify-content: space-around;\n\t/* !主轴水平时!决定了item在交叉轴上的对齐方式，可能的值有flex-start|flex-end|center|baseline|stretch */\n\talign-items: flex-start;\n}\n\n.card-container .card {\n    margin: .3em;\n    \n    padding: 5px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    /*height: 100%;*/\n    box-sizing: border-box;\n    transition: background-color 0.5s;\n    \n    width: 160px;\n    height: 10em;\n\n    background-color: #f1f1f1;\n    /*box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);*/\n    box-shadow: 0px 10px 20px -13px rgba(16, 16, 16, 0.35);\n    border-radius: 3px;\n\n    text-align: center;\n\n    /*background: #2db36a;\n    color: #ffffff;*/\n}\n\n/* Style the counter cards */\n/*.card-container .card {\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  padding: 16px;\n  text-align: center;\n  background-color: #f1f1f1;\n}*/\n\n.card-container .card .card-title {\n    /*color: #ffffff;\n    padding-bottom: 1em;\n    text-align: center;\n    opacity: 0.9;*/\n    \n    /*font-size: 1.200rem;\n    font-weight: 500;*/\n    font-size: 1.2em;\n    opacity: 0.9;\n    padding-bottom: 5px;\n}\n\n/*.card-container .card .card-line{\n    text-align: center;\n}*/\n\n.card-container .card .card-data-label{\n    /*color: #ffffff;*/\n    font-size: 0.8em;\n    opacity: 0.7;\n    /*text-align: center;*/\n}\n\n.card-container .card .card-data-pure-value {\n    /*color: #ffffff;*/\n    font-size: 1.6em;\n    font-weight: 500;\n}\n\n.card-container .card .card-data-unit {\n    /*color: #ffffff;*/\n    font-size: .6em;\n}\n\n#container {\n    overflow: auto;\n}\n\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
    "controllerScript": "//Avantec Manufacture Limited, V1.0.0, 20230705\nself.onInit = function() {\n    var global_cell_id = 111;\n\n    self.ctx.$container.append(\n        \"<div class='card-container'></div>\"\n    );\n    var cardContainer = $('.card-container', self.ctx.$container);\n\n    /* self.ctx.datasourceTitleCells = []; */\n    /* self.ctx.valueCells = []; \n    self.ctx.labelCells = []; */\n\n    self.ctx.cells = [];\n\n    let utils = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('utils'));\n    let startIndexOfData = 0;\n    for (var i=0; i < self.ctx.datasources.length; i++) {\n\n        // append a card per datasource\n        var tbDatasource = self.ctx.datasources[i];\n        var datasourceId = 'tbDatasource' + i;\n        // self.ctx.$container.append(\n        //     \"<div id='\" + datasourceId +\n        //     \"' class='tbDatasource-container'></div>\"\n        // );\n        cardContainer.append(\n            \"<div id='\" + datasourceId +\n            \"' class='card' class='mat-primary' data-data-source-alias-name='\"\n            + tbDatasource.aliasName +\n            \"' data-id='\" + tbDatasource.entityId +\n            \"' data-entity-type='\" + tbDatasource.entityType + \n            \"' data-entity-name='\" + tbDatasource.entityName + \n            \"' data-entity-label='\" + tbDatasource.entityLabel + \n            \"'></div>\"\n        );\n        var datasourceContainer = $('#' + datasourceId,\n            self.ctx.$container);\n        datasourceContainer.click((event) => {\n            self.onCardClick(event);\n        });\n         \n        // append a title on the top of a card\n        /* datasourceContainer.append(\n            \"<div class='tbDatasource-title'>\" +\n            tbDatasource.name + \"</div>\"\n        );\n        var datasourceTitleCell = $('.tbDatasource-title',\n            datasourceContainer);\n        self.ctx.datasourceTitleCells.push(datasourceTitleCell); */\n\n        /*\n        // append a table in a card\n        var tableId = 'table' + i;\n        datasourceContainer.append(\n            \"<table id='\" + tableId +\n            \"' class='tbDatasource-table'><col width='30%'><col width='70%'></table>\"\n        );\n        var table = $('#' + tableId, self.ctx.$container);\n        // append some tr/td for all data keys\n        for (var a = 0; a < tbDatasource.dataKeys.length; a++) {\n            var dataKey = tbDatasource.dataKeys[a];\n            var labelCellId = 'labelCell' + a;\n            var cellId = 'cell' + a;\n            table.append(\"<tr><td id='\" + labelCellId + \"'>\" + dataKey.label +\n                \"</td><td id='\" + cellId +\n                \"'></td></tr>\");\n            var labelCell = $('#' + labelCellId, table);\n            self.ctx.labelCells.push(labelCell);\n            var valueCell = $('#' + cellId, table);\n            self.ctx.valueCells.push(valueCell);\n        } */\n\n        // append some cells from datasource\n        const aliasName = tbDatasource.aliasName;\n        if (self.ctx.settings.cardTemplates) {\n            // look up a template for a aliasName\n            let template = self.ctx.settings.cardTemplates.find(\n                    template => template.aliasName === aliasName);\n            //console.log(\"template=\", template);\n            if (template) {\n                let pattern = utils.createLabelFromDatasource(\n                    tbDatasource, template.cardHtmlPattern);\n                //console.log(\"pattern=\", pattern);\n                if (pattern && self.ctx.datasources && self.ctx.datasources.length) {\n                    createCellsFromPattern(datasourceContainer, self.ctx.cells, \n                        pattern, tbDatasource, startIndexOfData);\n                }\n                \n                try {\n                    //let styleFunction = (datasource, ctx) => {return {};};\n                    if (template.cardStyleFunction && template.cardStyleFunction.length) {\n                        let styleFunction = new Function(\n                            'datasource', 'ctx', template.cardStyleFunction);\n                        let css = styleFunction(tbDatasource, self.ctx);\n                        if (css) {\n                            datasourceContainer.css(css);\n                            //datasourceContainer.css('background', '#2db36a');\n                        }\n                    }\n                } catch (ex) {\n                    console.log(ex);\n                }\n            }\n        }\n        \n        startIndexOfData += tbDatasource.dataKeys.length;\n    }    \n    \n    //console.log(\"self.ctx\", self.ctx);\n    //console.log(\"self.ctx.settings\", self.ctx.settings);\n    //console.log(\"self.ctx.datasources\", self.ctx.datasources);\n    /* console.log(\"self.ctx.datasourceTitleCells[0]\", self.ctx.datasourceTitleCells[0]); */\n    \n    self.onResize();\n\n    function createCellsFromPattern(container, cells, pattern, datasource,\n            startIndexOfData) {\n        const replaceInfo = processDataPattern(pattern, datasource);\n        //console.log(\"replaceInfo=\", replaceInfo);\n        fillDataPattern(container, cells, pattern, replaceInfo, datasource,\n            startIndexOfData);\n    }\n    function fillDataPattern(container, cells, pattern, replaceInfo, datasource,\n            startIndexOfData) {\n        let ids = [];\n        let text = pattern; //utils.createLabelFromDatasource(datasource, pattern);\n        if (replaceInfo) {\n            for (const variableInfo of replaceInfo) {\n                // let txtVal = '';\n                // if (variableInfo.dataKeyName && isDefinedAndNotNull(data[variableInfo.dataKeyName]))\n                // {\n                //     const varData = data[variableInfo.dataKeyName];\n                //     if (isNumber(varData)) {\n                //         txtVal = padValue(varData, variableInfo.valDec);\n                //     } else {\n                //         txtVal = varData;\n                //     }\n                // }\n                // text = text.replace(variableInfo.variable, txtVal);\n                \n                let index = getDataKeyIndexFromDataSource(\n                                variableInfo.dataKeyName, datasource);\n                if (isDefinedAndNotNull(index)) {\n                    index += startIndexOfData;\n                    let cellId = \"cell_id_\"+global_cell_id; global_cell_id +=1;\n                    let txtVal =   \"<span id='\" + cellId + \"' class='card-data-pure-value'></span>\";\n                    text = text.replace(variableInfo.variable, txtVal);\n                    ids.push({cellId:cellId, index:index});\n                    //console.log(cellId, index);\n                }\n            }\n        }\n        container.append(text);\n        ids.forEach(item => {\n            var valueCell = $('#' + item.cellId, container);\n            cells.push({index:item.index, valueCell:valueCell});\n        });\n        \n        //console.log(\"ids=\", ids);\n    }\n    function processDataPattern(pattern, datasource) {\n        const replaceInfo = [];\n        try {\n            const reg = /\\${([^}]*)}/g;\n            let match = reg.exec(pattern);\n            while (match !== null) {\n                const variableInfo = {\n                    dataKeyName: '',\n                    valDec: 2,\n                    variable: ''\n                };\n                const variable = match[0];\n                let label = match[1];\n                let valDec = 2;\n                const splitValues = label.split(':');\n                if (splitValues.length > 1) {\n                    label = splitValues[0];\n                    valDec = parseFloat(splitValues[1]);\n                }\n        \n                variableInfo.variable = variable;\n                variableInfo.valDec = valDec;\n        \n                if (label.startsWith('#')) {\n                    const keyIndexStr = label.substring(1);\n                    const n = Math.floor(Number(keyIndexStr));\n                    if (String(n) === keyIndexStr && n >= 0) {\n                        variableInfo.dataKeyName = datasource.dataKeys[n].label;\n                    }\n                } else {\n                    variableInfo.dataKeyName = label;\n                }\n                replaceInfo.push(variableInfo);\n\n                match = reg.exec(pattern);\n            }\n        } catch (ex) {\n            console.log(ex, pattern);\n        }\n        return replaceInfo;\n    }\n    function getDataKeyIndexFromDataSource(datakeyLabel, datasource) {\n        let index;\n        try {\n            index  = datasource.dataKeys.findIndex(\n                (dataKey) => dataKey.label === datakeyLabel);\n            //console.log(\"datakeyLabel=\", datakeyLabel, index);\n        } catch (ex) {\n            console.log(ex);\n        }\n        return index;\n    }\n    function isDefinedAndNotNull(value) {\n        return typeof value !== 'undefined' && value !== null;\n    }\n};\n\nself.onCardClick= function(event) { //Element\n    //console.log(\"event=\", event); //alert(\"1\");\n\n    const element = event.currentTarget; // event.target || event.srcElement;\n    if (event && element.dataset && element.dataset.id) {\n        const dataSourceAliasName = element.dataset.dataSourceAliasName || '';\n        const id_ = element.dataset.id ? element.dataset.id : null\n            , entityType_ = element.dataset.entityType ? element.dataset.entityType : null\n            , entityId = {entityType: entityType_, id: id_}\n            , entityName = element.dataset.entityName ? element.dataset.entityName : null\n            , entityLabel = element.dataset.entityLabel ? element.dataset.entityLabel : null;\n        // const entityInfo = self.ctx.actionsApi.getActiveEntityInfo()\n        //     , entityId = entityInfo ? entityInfo.entityId : null\n        //     , entityName = entityInfo ? entityInfo.entityName : null\n        //     , entityLabel = entityInfo && entityInfo.entityLabel ? entityInfo.entityLabel : null;\n\n        // self.ctx.actionsApi.getActionDescriptors(actionSourceId);\n        let actionDescriptors = self.ctx.actionsApi.getActionDescriptors(\"elementClick\");\n    \n        //console.log(\"self.ctx=\", self.ctx);\n        //console.log(\"dataSourceAliasName=\", dataSourceAliasName);\n        //console.log(\"actionDescriptors=\", actionDescriptors);\n    \n        //console.log(\"entityInfo=\", entityInfo);\n        //console.log(\"entityId=\", entityId);\n        //console.log(\"entityName=\", entityName);\n        //console.log(\"entityLabel=\", entityLabel);\n    \n        if (actionDescriptors.length) {\n            const descriptor = actionDescriptors.find(actionDescriptor => actionDescriptor.name === dataSourceAliasName);\n            //console.log(\"descriptor=\", descriptor);\n            if (descriptor) {\n                event.stopPropagation();\n                // self.ctx.actionsApi.handleWidgetAction($event, descriptor, entityId, entityName);\n                self.ctx.actionsApi.handleWidgetAction(event, descriptor, entityId, entityName, null, entityLabel);\n            }\n        }\n    } else {\n        \n    }\n};\n\nself.onDataUpdated = function() {\n    /*\n    for (var i = 0; i < self.ctx.valueCells.length; i++) {\n        var cellData = self.ctx.data[i];\n        if (cellData && cellData.data && cellData.data.length > 0) {\n            var tvPair = cellData.data[cellData.data.length - 1];\n            var value = tvPair[1];\n            var txtValue;\n            //toDo -> + IsNumber\n            \n            if (isNumber(value)) {\n                var decimals = self.ctx.decimals;\n                var units = self.ctx.units;\n                if (cellData.dataKey.decimals || cellData.dataKey.decimals === 0) {\n                    decimals = cellData.dataKey.decimals;\n                }\n                if (cellData.dataKey.units) {\n                    units = cellData.dataKey.units;\n                }\n                txtValue = self.ctx.utils.formatValue(value, decimals, units, true);\n            } else {\n                txtValue = value;\n            }\n            self.ctx.valueCells[i].html(txtValue);\n        }\n    } */\n    \n    // new TC\n    //console.log(\"self.ctx.cells=\", self.ctx.cells);\n    for (var i = 0; i < self.ctx.cells.length; i++) {\n        var cellData = self.ctx.data[self.ctx.cells[i].index];\n        if (cellData && cellData.data && cellData.data.length > 0) {\n            var tvPair = cellData.data[cellData.data.length - 1];\n            var value = tvPair[1];\n            //toDo -> + IsNumber\n\n            // update HTML\n            var txtValue;\n            if (cellData.dataKey.settings.useCellContentFunction) {\n                txtValue = getCellContentFromFunction(value,\n                    cellData.datasource, self.ctx,\n                    cellData.dataKey.settings.cellContentFunction);\n            } else {\n                txtValue = getCellContent(value, cellData.dataKey.decimals,\n                    cellData.dataKey.units, self.ctx);\n            }\n            self.ctx.cells[i].valueCell.html(txtValue);\n            \n            // update CSS\n            if (cellData.dataKey.settings.useCellStyleFunction) {\n                //console.log(\"cellData.dataKey.settings.useCellStyleFunction=\",\n                //  cellData.dataKey.settings.useCellStyleFunction);\n                let txtStyle = getCellStyleFromFunction(value,\n                        cellData.datasource, self.ctx,\n                        cellData.dataKey.settings.cellStyleFunction);\n                self.ctx.cells[i].valueCell.css(txtStyle);\n                //console.log(\"txtStyle=\", txtStyle);\n            }\n        }\n    }\n    \n    function getCellContent(value, decimals_, units_, ctx) {\n        let txtValue = \"\";\n        if (isNumber(value)) {\n            let decimals = ctx.decimals;\n            let units = ctx.units;\n            if (decimals_ || decimals_ === 0) {\n                decimals = decimals_;\n            }\n            if (units_) {\n                units = units_;\n            }\n            txtValue = ctx.utils.formatValue(value, decimals, units, true);\n        } else {\n            txtValue = value;\n            try {\n                if (typeof value === 'undefined' || value === null || typeof value === \"string\" && value.length==0) {\n                  txtValue = \"&nbsp;\";\n                }\n            } catch (ex) {\n                console.log(ex);\n            }\n            //console.log(\"value=\", value, \"value.length=\", value.length, \"txtValue=\", txtValue);\n        }        \n        return txtValue;\n    }\n    function getCellContentFromFunction(value, tbDatasource, ctx, cellContentFunction) {\n        let txtValue = \"\";\n        try {\n            if (cellContentFunction && cellContentFunction.length) {\n                let contentFunction = new Function('value',\n                    'datasource', 'ctx', cellContentFunction);\n                txtValue = contentFunction(value, tbDatasource, ctx);\n            }\n        } catch (ex) {\n            console.log(ex);\n        }\n        return txtValue;\n    }\n    function getCellStyleFromFunction(value, tbDatasource, ctx, cellStyleFunction) {\n        let txtStyle = {};\n        try {\n            if (cellStyleFunction && cellStyleFunction.length) {\n                let styleFunction = new Function('value',\n                    'datasource', 'ctx', cellStyleFunction);\n                txtStyle = styleFunction(value, tbDatasource, ctx);\n            }\n        } catch (ex) {\n            console.log(ex);\n        }\n        return txtStyle;\n    }\n    \n    function isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n};\n\nself.onResize = function() {\n    /* var datasourceTitleFontSize = self.ctx.height/8;\n    if (self.ctx.width/self.ctx.height <= 1.5) {\n        datasourceTitleFontSize = self.ctx.width/12;\n    }\n    datasourceTitleFontSize = Math.min(datasourceTitleFontSize, 20);\n    for (var i = 0; i < self.ctx.datasourceTitleCells.length; i++) {\n        self.ctx.datasourceTitleCells[i].css('font-size', datasourceTitleFontSize+'px');\n    } */\n    var valueFontSize = self.ctx.height/9;\n    var labelFontSize = self.ctx.height/9;\n    if (self.ctx.width/self.ctx.height <= 1.5) {\n        valueFontSize = self.ctx.width/15;\n        labelFontSize = self.ctx.width/15;\n    }\n    valueFontSize = Math.min(valueFontSize, 18);\n    labelFontSize = Math.min(labelFontSize, 18);\n\n    /*\n    for (i = 0; i < self.ctx.valueCells; i++) {\n        self.ctx.valueCells[i].css('font-size', valueFontSize+'px');\n        self.ctx.valueCells[i].css('height', valueFontSize*2.5+'px');\n        self.ctx.valueCells[i].css('padding', '0px ' + valueFontSize + 'px');\n        self.ctx.labelCells[i].css('font-size', labelFontSize+'px');\n        self.ctx.labelCells[i].css('height', labelFontSize*2.5+'px');\n        self.ctx.labelCells[i].css('padding', '0px ' + labelFontSize + 'px');\n    }*/\n};\n\n// self.typeParameters = function() {\n//     // TODO:\n// };\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n};\n\nself.onDestroy = function() {\n};\n\n    // function isNumber(value) {\n    //     return typeof value === 'number';\n    // }\n    // function padValue(val, dec) {\n    //     let strVal;\n    //     let n;\n        \n    //     val = parseFloat(val);\n    //     n = (val < 0);\n    //     val = Math.abs(val);\n        \n    //     if (dec > 0) {\n    //         strVal = val.toFixed(dec);\n    //     } else {\n    //         strVal = Math.round(val).toString();\n    //     }\n    //     strVal = (n ? '-' : '') + strVal;\n    //     return strVal;\n    // }\n",
    "settingsSchema": "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"cardTemplates\": {\r\n                \"type\": \"array\",\r\n                \"title\": \"Card templates\",\r\n                \"items\": {\r\n                    \"type\": \"object\",\r\n                    \"properties\": {\r\n                        \"aliasName\": {\r\n                            \"type\": \"string\",\r\n                            \"title\": \"Alias Name\",\r\n                            \"minLength\": 1\r\n                        },\r\n                        \"cardHtmlPattern\": {\r\n                            \"title\": \"Card HTML pattern (HTML with variables, for ex. '${entityName}, ${entityLabel} or ${keyName} - some text.')\",\r\n                            \"type\": \"string\",\r\n                            \"default\": \"<div class='card-title'>\\n    ${entityName}\\n</div>\\n\\n<div class='card-data-label'>\\n    Sin\\n</div>\\n<div>\\n    ${Sin:1}\\n</div>\\n\\n<div class='card-data-label'>\\n    Cos\\n</div>\\n<div>\\n    ${Cos:2} <span class='card-data-unit'>°C</span>\\n</div>\"\r\n                        },\r\n                        \"cardStyleFunction\": {\r\n                            \"title\": \"Card style function: f(datasource, ctx)\",\r\n                            \"type\": \"string\",\r\n                            \"default\": \"//return { \\n//  fontWeight: 'bold', \\n//  background: '#2db36a',\\n//  color: '#ffffff'// 'green' \\n//};\\nreturn {};\"\r\n                        }\r\n                    },\r\n                    \"required\": [\r\n                        \"aliasName\",\r\n                        \"cardHtmlPattern\",\r\n                        \"cardStyleFunction\"\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        \"required\": [\r\n            \"cardTemplates\"\r\n        ]\r\n    },\r\n    \"form\": [\r\n        {\r\n            \"type\": \"help\",\r\n            \"description\": \"<I><small>Note: A card template and a action of element click per entity alias used in the datasources.</small></I>\"\r\n        },\r\n        {\r\n            \"key\": \"cardTemplates\",\r\n            \"type\": \"array\",\r\n            \"items\": [\r\n                \"cardTemplates[].aliasName\",\r\n                {\r\n                    \"key\": \"cardTemplates[].cardHtmlPattern\",\r\n                    \"type\": \"html\"\r\n                },\r\n                {\r\n                    \"key\": \"cardTemplates[].cardStyleFunction\",\r\n                    \"type\": \"javascript\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
    "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"useCellContentFunction\": {\n                \"title\": \"Use cell content function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellContentFunction\": {\n                \"title\": \"Cell content function: f(value, datasource, ctx)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellStyleFunction\": {\n                \"title\": \"Use cell style function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellStyleFunction\": {\n                \"title\": \"Cell style function: f(value, datasource, ctx)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": [\n            \"useCellContentFunction\",\n            \"useCellStyleFunction\"]\n    },\n    \"form\": [\n        \"useCellContentFunction\",\n        {\n            \"key\": \"cellContentFunction\",\n            \"type\": \"javascript\",\n            \"helpId\": \"widget/lib/entity/cell_content_fn\",\n            \"condition\": \"model.useCellContentFunction === true\"\n        },\n        \"useCellStyleFunction\",\n        {\n            \"key\": \"cellStyleFunction\",\n            \"type\": \"javascript\",\n            \"helpId\": \"widget/lib/entity/cell_style_fn\",\n            \"condition\": \"model.useCellStyleFunction === true\"\n        }\n    ]\n}",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function1\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#f44336\",\"settings\":{\"useCellStyleFunction\":false,\"useCellContentFunction\":false,\"cellContentFunction\":\"return value;\"},\"_hash\":0.921001743574346,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\",\"aggregationType\":null,\"units\":null,\"decimals\":1,\"usePostProcessing\":null,\"postFuncBody\":null},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#ffc107\",\"settings\":{},\"_hash\":0.7396784107489787,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"aggregationType\":null,\"units\":null,\"decimals\":2,\"usePostProcessing\":null,\"postFuncBody\":null}],\"alarmFilterConfig\":{\"statusList\":[\"ACTIVE\"]}},{\"type\":\"function\",\"name\":\"function2\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.197245861336796,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\",\"aggregationType\":null,\"units\":null,\"decimals\":1,\"usePostProcessing\":null,\"postFuncBody\":null},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Cos\",\"color\":\"#ffc107\",\"settings\":{\"useCellStyleFunction\":true,\"useCellContentFunction\":true,\"cellContentFunction\":\"return value > 0 ? (\\\"\\\"+value+\\\", true\\\") : (\\\"\\\"+value+\\\", false\\\");\",\"cellStyleFunction\":\"let color_ = value > 0 ? \\\"Lime\\\" : \\\"Purple\\\";\\nreturn {\\n    color: color_\\n};\"},\"_hash\":0.9530188663404315,\"funcBody\":\"return Math.round(1000*Math.cos(time/5000));\",\"aggregationType\":null,\"units\":null,\"decimals\":2,\"usePostProcessing\":null,\"postFuncBody\":null}],\"alarmFilterConfig\":{\"statusList\":[\"ACTIVE\"]}}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardTemplates\":[{\"additionalInfoRequired\":false,\"cardHtmlPattern\":\"<div class='card-title'>\\n    ${entityName}! This is a testing of title!\\n</div>\\n<div> \\n    <span class=\\\"card-data-label\\\">Sin:</span> \\n    ${Sin:1}\\n</div>\\n<div>\\n    <span class=\\\"card-data-label\\\">Random:</span>\\n    ${Random:2}\\n</div>\\n<div>\\n    <span class=\\\"card-data-label\\\">Duplicate random:</span>\\n    ${Random:2}\\n</div>\",\"aliasName\":\"function1\",\"cardStyleFunction\":\"//return { \\n//  fontWeight: 'bold', \\n//  background: '#2db36a',\\n//  color: '#ffffff'// 'green' \\n//};\\nreturn {};\"},{\"cardHtmlPattern\":\"<div class='card-title'> \\n    ${entityName}\\n</div>\\n\\n<div class='card-data-label'>\\n    Sin\\n</div>\\n<div>\\n    ${Sin:1}\\n</div>\\n\\n<div class='card-data-label'>\\n    Cos. This a a testing of data label!\\n</div>\\n<div>\\n    ${Cos:2} <span class=\\\"card-data-unit\\\">°C</span>\\n</div>\",\"aliasName\":\"function2\",\"cardStyleFunction\":\"//return { \\n//  fontWeight: 'bold', \\n//  background: '#2db36a',\\n//  color: '#ffffff'// 'green' \\n//};\\nreturn {background: '#2db36a', color: 'white'};\"}]},\"title\":\"Entities Cards\",\"useDashboardTimewindow\":true,\"actions\":{\"elementClick\":[{\"name\":\"function1\",\"icon\":\"settings\",\"useShowWidgetActionFunction\":null,\"showWidgetActionFunction\":\"return true;\",\"type\":\"custom\",\"customFunction\":\"alert(\\\"click function1\\\");\",\"openInSeparateDialog\":false,\"openInPopover\":false,\"id\":\"47834831-03d9-3202-0355-0b56baf200d3\"},{\"name\":\"function2\",\"icon\":\"my_location\",\"useShowWidgetActionFunction\":null,\"showWidgetActionFunction\":\"return true;\",\"type\":\"custom\",\"customFunction\":\"alert(\\\"click function2\\\");\",\"openInSeparateDialog\":false,\"openInPopover\":false,\"id\":\"be41565a-831e-aae5-3ebe-ca27c194bfbd\"}]}}"
  }
}