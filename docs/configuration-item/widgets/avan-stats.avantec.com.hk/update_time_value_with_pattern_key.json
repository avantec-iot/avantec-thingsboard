{
  "alias": "update_time_value_with_pattern_key",
  "name": "Update time value with pattern key",
  "image": null,
  "description": null,
  "descriptor": {
    "type": "rpc",
    "sizeX": 6.5,
    "sizeY": 2,
    "resources": [],
    "templateHtml": "<div tb-toast toastTarget=\"{{ toastTargetId }}\"\r\n    style=\"width: 100%; height: 100%;\">\r\n\r\n    <div class=\"tb-rpc-button\" fxLayout=\"column\">\r\n        <div fxFlex=\"{{showTitle ? 20 : 0}}\"\r\n            [ngStyle]=\"{paddingTop: showTitle ? '5px': '0px'}\"\r\n            class=\"title-container\" fxLayout=\"row\"\r\n            fxLayoutAlign=\"start center\"\r\n            [fxShow]=\"showTitle\">\r\n            <span class=\"button-title\">{{title}}</span>\r\n        </div>\r\n\r\n        <div fxFlex=\"{{showTitle ? 80 : 100}}\"\r\n            [ngStyle]=\"{paddingTop: showTitle ? '0px': '0px'}\"\r\n            class=\"button-container\" fxLayout=\"column\"\r\n            fxLayoutAlign=\"center center\">\r\n\r\n            <form class=\"attribute-update-form\"\r\n                name=\"attrUpdateForm\"\r\n                (ngSubmit)=\"updateValue()\"\r\n                [fxShow]=\"entityDetected && isValidParameter && dataKeyDetected\">\r\n\r\n                <mat-form-field class=\"mat-block\" >\r\n                    <input mat-timepicker matInput\r\n                        [(ngModel)]=\"currentValue\" required\r\n                        type=\"time\"\r\n                        [ngModelOptions]=\"{standalone: true}\" />\r\n                </mat-form-field>\r\n\r\n                <button mat-icon-button\r\n                    class=\"applyChanges\" type=\"submit\"\r\n                    [disabled]=\"(originalValue === currentValue) || (!currentValue)\"\r\n                    matTooltip=\"{{ 'widgets.input-widgets.update-attribute' | translate }}\"\r\n                    matTooltipPosition=\"above\">\r\n                    <mat-icon>check</mat-icon>\r\n                </button>\r\n                <button mat-icon-button\r\n                    class=\"discardChanges\" type=\"button\"\r\n                    [disabled]=\"originalValue === currentValue\"\r\n                    (click)=\"currentValue = originalValue;\"\r\n                    matTooltip=\"{{ 'widgets.input-widgets.discard-changes' | translate }}\"\r\n                    matTooltipPosition=\"above\">\r\n                    <mat-icon>close</mat-icon>\r\n                </button>\r\n\r\n                <div style=\"text-align: center; font-size: 18px; color: #a0a0a0;\"\r\n                    [fxHide]=\"entityDetected\"\r\n                    [innerHtml]=\"message\"></div>\r\n                <div style=\"text-align: center; font-size: 18px; color: #a0a0a0;\"\r\n                    [fxShow]=\"entityDetected && !dataKeyDetected\">\r\n                    {{ 'widgets.input-widgets.no-attribute-selected' | translate }}\r\n                </div>\r\n                <div style=\"text-align: center; font-size: 18px; color: #a0a0a0;\"\r\n                    [fxShow]=\"entityDetected && !isValidParameter\">\r\n                    {{ 'widgets.input-widgets.timeseries-not-allowed' | translate }}\r\n                </div>\r\n\r\n            </form>\r\n            \r\n            <!--<mat-error>-->\r\n            <!--    {{requiredErrorMessage}}-->\r\n            <!--</mat-error>-->\r\n\r\n        </div>\r\n    </div>\r\n\r\n</div>",
    "templateCss": ".tb-rpc-button {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.tb-rpc-button .title-container {\r\n    font-size: 0.8em;\r\n    font-weight: normal;\r\n    white-space: nowrap;\r\n    opacity: 0.5;\r\n    margin: 0;\r\n}\r\n\r\n/*.tb-rpc-button .button-container div{*/\r\n/*    min-width: 80%;*/\r\n/*}*/\r\n\r\n/* TC 20221020 */\r\n.tb-rpc-button .button-container input {\r\n    /*font-size: 1em;*/\r\n    font-weight: bold;\r\n    /*line-height: 1.5;*/\r\n    /*color: #333333;*/\r\n}\r\n\r\n/*.tb-rpc-button .button-container .mat-button{*/\r\n/*    width: 100%;*/\r\n/*    margin: 0;*/\r\n/*}*/\r\n\r\n/*.tb-rpc-button .button-container .mat-button{*/\r\n/*    padding: 0 0px;*/\r\n/*}*/\r\n\r\n\r\n\r\n.entity-title {\r\n    font-weight: bold;\r\n    font-size: 22px;\r\n    padding-top: 12px;\r\n    padding-bottom: 6px;\r\n    color: #666;\r\n}\r\n\r\n.tb-rpc-button .attribute-update-form {\r\n    /*overflow: hidden;*/\r\n    /*width: 100%;*/\r\n    /*height: 100%;*/\r\n    display: flex;\r\n    /*flex-direction: row;*/\r\n    /*justify-content: center;*/\r\n    /*align-items: center;*/\r\n}\r\n\r\n/*.tb-rpc-button .attribute-update-form .mat-button.mat-icon-button {*/\r\n/*    margin: 0;*/\r\n/*    width: 24px;*/\r\n/*    min-width: 24px;*/\r\n/*    height: 24px;*/\r\n/*    min-height: 24px;*/\r\n/*    padding: 0 !important;*/\r\n/*    margin: 0 !important;*/\r\n/*    line-height: 20px;*/\r\n/*}*/\r\n\r\n/*.tb-rpc-button .attribute-update-form .mat-icon-button mat-icon {*/\r\n/*    width: 20px;*/\r\n/*    min-width: 20px;*/\r\n/*    height: 20px;*/\r\n/*    min-height: 20px;*/\r\n/*    font-size: 20px;*/\r\n/*}*/\r\n\r\n/*.tb-rpc-button .attribute-update-form mdp-date-picker,*/\r\n/*.tb-rpc-button .attribute-update-form mdp-time-picker {*/\r\n/*    width: 100%;*/\r\n/*}*/\r\n\r\n/*.tb-rpc-button .attribute-update-form mdp-date-picker md-input-container,*/\r\n/*.tb-rpc-button .attribute-update-form mdp-time-picker md-input-container */\r\n/*{*/\r\n/*    margin: 5px 0 5px;*/\r\n/*    width: 100%;*/\r\n/*}*/\r\n\r\n/*.tb-rpc-button .attribute-update-form grid__element .button.mat-icon-button*/\r\n/*{*/\r\n/*    margin: 2px 0 0;*/\r\n/*    padding: 0;*/\r\n/*    width: 22px;*/\r\n/*    height: 20px;*/\r\n/*}*/\r\n\r\n/*.tb-rpc-button .attribute-update-form mat-form-field .mat-form-field-infix */\r\n/*{*/\r\n/*    padding: 0;*/\r\n/*    border-top: .6em solid transparent;*/\r\n/*    width: fit-content;*/\r\n/*}*/\r\n\r\n/*.tb-rpc-button .attribute-update-form.small-width mdp-date-picker md-input-container,*/\r\n/*.tb-rpc-button .attribute-update-form.small-width mdp-time-picker md-input-container {*/\r\n/*    width: 78px;*/\r\n/*}*/\r\n\r\n.tb-rpc-button .show-label label {\r\n    display: block;\r\n}\r\n\r\nlabel {\r\n    display: none;\r\n}\r\n\r\nmd-toast{\r\n    min-width: 0;\r\n}\r\n\r\n.tb-toast {\r\n    font-size: 14px!important;\r\n}\r\n\r\n/*.tb-rpc-button .attribute-update-form  .mat-mdc-icon-button.mat-mdc-button-base {*/\r\n/*    width: 36px;*/\r\n/*    height: 36px;*/\r\n/*    padding: 8px;*/\r\n/*}*/\r\n\r\n/*.tb-rpc-button .attribute-update-form .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix {*/\r\n/*    padding-top: 8px;*/\r\n/*    padding-bottom: 8px;*/\r\n/*}*/\r\n\r\n\r\n/*.tb-rpc-button .attribute-update-form .mat-mdc-form-field {*/\r\n/*    flex-direction: row;*/\r\n/*}*/\r\n\r\n/*.tb-rpc-button .attribute-update-form .mat-mdc-form-field-subscript-wrapper {*/\r\n/*    width: 0px;*/\r\n/*    height: 0px;*/\r\n/*}*/\r\n\r\n.tb-rpc-button .attribute-update-form .mat-mdc-form-field-hint-spacer {\r\n    flex: 0 0 0;\r\n}\r\n\r\n.tb-rpc-button .attribute-update-form .mat-mdc-form-field-hint-wrapper,\r\n.tb-rpc-button .attribute-update-form .mat-mdc-form-field-error-wrapper {\r\n    /*position: absolute;*/\r\n    /*top: 0;*/\r\n    /*left: 0;*/\r\n    /*right: 0;*/\r\n    width: 0;\r\n    padding: 0 0;\r\n}\r\n\r\n/*.tb-rpc-button .attribute-update-form .mat-mdc-form-field-subscript-wrapper {*/\r\n/*    width: 0px;*/\r\n/*}*/\r\n\r\n/*.tb-rpc-button .attribute-update-form .mat-mdc-form-field-flex {*/\r\n/*    width: fit-content;*/\r\n/*}*/\r\n\r\n/*.tb-rpc-button .attribute-update-form .mdc-text-field__input {*/\r\n/*    width: fit-content;*/\r\n/*}*/\r\n\r\n.tb-rpc-button .attribute-update-form .mdc-text-field{\r\n    /*padding: 0 4px;*/\r\n    padding: 0 4px;\r\n}\r\n\r\n.tb-rpc-button .attribute-update-form .mat-mdc-form-field-subscript-wrapper,\r\n.tb-rpc-button .attribute-update-form .mat-mdc-form-field-bottom-align:before {\r\n    /*-moz-osx-font-smoothing: grayscale;*/\r\n    /*-webkit-font-smoothing: antialiased;*/\r\n    /*font-family: var(--mdc-typography-caption-font-family,var(--mdc-typography-font-family,Roboto,sans-serif));*/\r\n    /*font-size: var(--mdc-typography-caption-font-size,12px);*/\r\n    /*line-height: var(--mdc-typography-caption-line-height,20px);*/\r\n    line-height: 0px;\r\n    height: 0px;\r\n    /*font-weight: var(--mdc-typography-caption-font-weight,400);*/\r\n    /*letter-spacing: var(--mdc-typography-caption-letter-spacing,.0333333333em);*/\r\n    /*-webkit-text-decoration: var(--mdc-typography-caption-text-decoration,inherit);*/\r\n    /*text-decoration: var(--mdc-typography-caption-text-decoration,inherit);*/\r\n    /*text-transform: var(--mdc-typography-caption-text-transform,none)*/\r\n}\r\n\r\n\r\n.tb-rpc-button .attribute-update-form .mat-mdc-form-field-infix {\r\n    /*width: 180px;*/\r\n    /*min-height: 56px;*/\r\n    min-height: 48px;\r\n    width: 100px;\r\n}\r\n\r\n.tb-rpc-button .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix {\r\n    /*padding-top: 16px;*/\r\n    /*padding-bottom: 16px;*/\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n}",
    "controllerScript": "// v.2.4, 2023-09-25 17:00\r\n\r\n// placeholder=\"{{ 'widgets.input-widgets.time' | translate }}\"\r\n\r\nlet valueSubscription;\r\nlet $scope;\r\n\r\nself.onInit = function() {\r\n    //console.log(\"self.onInit()\");\r\n    self.ctx.ngZone.run(function() {\r\n       init();\r\n       self.ctx.detectChanges(true);\r\n    });\r\n};\r\n\r\n\r\nfunction init() {\r\n\r\n    $scope = self.ctx.$scope;\r\n    let utils       = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('utils'));\r\n    //let types       = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('types'));\r\n    //let toast       = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('toast'));\r\n    let translate   = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('translate'));\r\n    //let $q          = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('$q'));\r\n    let http        = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('http'));\r\n    let attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\r\n    let rpcUpdateStatus = {};\r\n    let settings = utils.deepClone(self.ctx.settings) || {};\r\n    self.ctx.$scope.toastTargetId = 'input-widget' + utils.guid();\r\n    $scope.settings = settings;\r\n    $scope.isValidParameter = true;                 // yes,html\r\n    $scope.entityDetected = true;       // false;   // yes,html\r\n    $scope.dataKeyDetected = true;      // false;   // yes,html\r\n    $scope.message = translate.instant('widgets.input-widgets.no-entity-selected');    // yes,html\r\n    // $scope.requiredErrorMessage = utils.customTranslation(settings.requiredErrorMessage, settings.requiredErrorMessage) || translate.instant            ('widgets.input-widgets.entity-attribute-required');    // yes,html\r\n    if (settings.widgetTitle && settings.widgetTitle.length) {\r\n        $scope.titleTemplate = utils.customTranslation(settings.widgetTitle, settings.widgetTitle);\r\n    } else {\r\n        $scope.titleTemplate = self.ctx.widgetConfig.title;\r\n    }\r\n    //self.ctx.widgetTitle = utils.createLabelFromDatasource(self.ctx.datasources[0], $scope.titleTemplate);\r\n    self.ctx.widgetTitle = $scope.titleTemplate;\r\n\r\n    self.ctx.$scope.showTitle = self.ctx.settings.title && self.ctx.settings.title.length ? true : false;\r\n    self.ctx.$scope.title = self.ctx.settings.title;\r\n    \r\n    if (self.ctx.isEdit) {\r\n        self.ctx.$scope.currentValue = self.ctx.$scope.originalValue = \"10:10\";\r\n    }\r\n\r\n    let stateParams = {};\r\n    if (!self.ctx.isEdit && self.ctx.stateController) {\r\n        stateParams = self.ctx.stateController.getStateParams();\r\n    }\r\n    let patternCommonParam = settings.patternCommonParam;\r\n\r\n    /*function parseValue(data) {\r\n        //Using retrieve data: parse \"09:30\" to \"Thu Jan 01 1970 09:30:00 GMT+0800 (香港標準時間)\"\r\n        let result;\r\n        if (data && data.length>1 && typeof data === \"string\") {\r\n            var strarr = data.split(':', 3);\r\n            if (strarr && strarr.length>=2) {\r\n                var hour = Number(strarr[0]);\r\n                var min = Number(strarr[1]);\r\n                \r\n                if (hour>=0 && hour<=23 && min>=0 && min<=59) {\r\n                    var m = moment(\"1970-01-01 00:00:00.000\")\r\n                    m.hour(hour); \r\n                    m.minute(min); \r\n                    if (m.isValid()) {\r\n                        result = m.toDate();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        console.log(\"parseValue(): \", data, result);\r\n        return result;\r\n    }*/\r\n\r\n    let patternParamOfetrievedAttributeKeyOrMethodName = \" \";\r\n    if (settings.retrieveMethod === \"attribute\" || settings.retrieveMethod === \"SHARED_SCOPE\" || settings.retrieveMethod === \"SERVER_SCOPE\") {\r\n        patternParamOfetrievedAttributeKeyOrMethodName = settings.patternParamOfRetrieveAttributeKey;\r\n    } else if (settings.retrieveMethod === \"timeseries\") {\r\n        patternParamOfetrievedAttributeKeyOrMethodName = settings.patternParamOfRetrieveTimeseriesKey;\r\n    } else if (settings.retrieveMethod === \"rpc\") {\r\n        patternParamOfetrievedAttributeKeyOrMethodName = settings.patternParamOfRetrieveRPCMethodName;\r\n    }\r\n\r\n    let convertRetrievedAttributeKeyOrMethodNameFunction = (stateParams, patternParamOfetrievedAttributeKeyOrMethodName, patternCommonParam) => patternParamOfetrievedAttributeKeyOrMethodName + patternCommonParam;\r\n    if (settings.convertRetrievedAttributeKeyOrMethodNameFunction && settings.convertRetrievedAttributeKeyOrMethodNameFunction.length) {\r\n        try {\r\n            convertRetrievedAttributeKeyOrMethodNameFunction = new Function('stateParams', 'patternParamOfetrievedAttributeKeyOrMethodName', 'patternCommonParam', settings.convertRetrievedAttributeKeyOrMethodNameFunction);\r\n        } catch (e) {\r\n            convertRetrievedAttributeKeyOrMethodNameFunction = (stateParams, patternParamOfetrievedAttributeKeyOrMethodName, patternCommonParam) => patternParamOfetrievedAttributeKeyOrMethodName + patternCommonParam;\r\n        }\r\n    }\r\n    let retrievedAttributeKeyOrMethodName = convertRetrievedAttributeKeyOrMethodNameFunction(stateParams, patternParamOfetrievedAttributeKeyOrMethodName, patternCommonParam);\r\n\r\n    let convertRetrievedValueFunction = (value) => value; //parseValue;  // Retrieve data\r\n    if (settings.convertRetrievedValueFunction && settings.convertRetrievedValueFunction.length) { \r\n        try {\r\n            convertRetrievedValueFunction = new Function('value', settings.convertRetrievedValueFunction);\r\n        } catch (e) {\r\n            convertRetrievedValueFunction = (value) => value; //parseValue;\r\n        }\r\n    }\r\n\r\n    /*function prefixInteger(num, n) {\r\n        return (Array(n).join(0) + num).slice(-n);\r\n    }    \r\n    function convertValue(value) {\r\n        // Using update data: convert 'Thu Jan 01 1970 09:30:00 GMT+0800 (香港標準時間)' to \"09:30\"\r\n        let result;\r\n        var m = moment(value);\r\n        if (m.isValid()) {\r\n            //result = prefixInteger(m.hour(), 2) + \":\" +　prefixInteger(m.minute(), 2);\r\n            result = (Array(2).join(0) + m.hour()).slice(-2) + \":\" +　(Array(2).join(0) + m.minute()).slice(-2);\r\n        }\r\n        return result;\r\n    }*/\r\n    \r\n    let patternParamOfUpdateAttributeKeyOrMethodName = \" \";\r\n    if (settings.updateMethod === \"SHARED_SCOPE\" || settings.updateMethod === \"SERVER_SCOPE\") {\r\n        patternParamOfUpdateAttributeKeyOrMethodName = settings.patternParamOfUpdateAttributeKey;\r\n    } else if (settings.updateMethod === \"timeseries\") {\r\n        patternParamOfUpdateAttributeKeyOrMethodName = settings.patternParamOfUpdateTimeseriesKey;\r\n    } else if (settings.updateMethod === \"rpc\") {\r\n        patternParamOfUpdateAttributeKeyOrMethodName = settings.patternParamOfUpdateRPCMethodName;\r\n    }\r\n\r\n    let convertUpdatedAttributeKeyOrMethodNameFunction = (stateParams, patternParamOfUpdateAttributeKeyOrMethodName, patternCommonParam) => patternParamOfUpdateAttributeKeyOrMethodName + patternCommonParam;\r\n    if (settings.convertUpdatedAttributeKeyOrMethodNameFunction && settings.convertUpdatedAttributeKeyOrMethodNameFunction.length) {\r\n        try {\r\n            convertUpdatedAttributeKeyOrMethodNameFunction = new Function('stateParams', 'patternParamOfUpdateAttributeKeyOrMethodName', 'patternCommonParam', settings.convertUpdatedAttributeKeyOrMethodNameFunction);\r\n        } catch (e) {\r\n            convertUpdatedAttributeKeyOrMethodNameFunction = (stateParams, patternParamOfUpdateAttributeKeyOrMethodName, patternCommonParam) => patternParamOfUpdateAttributeKeyOrMethodName + patternCommonParam;\r\n        }\r\n    }\r\n    let updateAttributeKeyOrMethodName = convertUpdatedAttributeKeyOrMethodNameFunction(stateParams, patternParamOfUpdateAttributeKeyOrMethodName, patternCommonParam);\r\n    \r\n    let convertUpdatedValueFunction = (value) => value; //convertValue;    // Update data\r\n    if (settings.convertUpdatedValueFunction && settings.convertUpdatedValueFunction.length) {\r\n        try {\r\n            convertUpdatedValueFunction = new Function('value', settings.convertUpdatedValueFunction);\r\n        } catch (e) {\r\n            convertUpdatedValueFunction = (value) => value; //convertValue;\r\n        }\r\n    }\r\n\r\n    // subscribe attribute & timeseries\r\n    function onDataUpdatedForSubscribe(subscription, apply) {\r\n        if (subscription.data.length) {\r\n            var keyData = subscription.data[0];\r\n            if (keyData && keyData.data && keyData.data[0]) {\r\n                var attrValue = keyData.data[0][1];\r\n                if (attrValue) {\r\n                    try {\r\n                        self.ctx.$scope.currentValue = self.ctx.$scope.originalValue = convertRetrievedValueFunction(attrValue);  ////angular.fromJson(attrValue)\r\n                    } catch (e){\r\n                        //self.ctx.$scope.error = 'convertRetrievedValueFunction(value) error!'\r\n                        $scope.showErrorToast(translate.instant(e), 'bottom', 'left', $scope.toastTargetId);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (apply) {\r\n            self.ctx.detectChanges(); //self.ctx.$scope.$digest();\r\n        }\r\n    }\r\n    function onDataUpdateErrorForSubscribe(subscription, e) {\r\n        var exceptionData = utils.parseException(e);\r\n        var errorText = exceptionData.name;\r\n        if (exceptionData.message) {\r\n            errorText += ': ' + exceptionData.message;\r\n        }\r\n        self.ctx.$scope.error = errorText;\r\n    }\r\n    \r\n    /*function subscribeAttributesOrTimeseries(type, entityType, entityId, retrieveMethod, key) {\r\n        var valueSubscriptionInfo = [{\r\n            type:       type,\r\n            entityType: entityType,\r\n            entityId:   entityId\r\n        }];\r\n        \r\n        if (retrieveMethod == 'attribute') {\r\n            valueSubscriptionInfo[0].attributes = [\r\n                {name: key}\r\n            ];\r\n        } else {\r\n            valueSubscriptionInfo[0].timeseries = [\r\n                {name: key}\r\n            ];\r\n        }\r\n        \r\n        var subscriptionOptions = {\r\n            callbacks: {\r\n                onDataUpdated: onDataUpdatedForSubscribe,\r\n                onDataUpdateError: onDataUpdateErrorForSubscribe\r\n            }\r\n        };\r\n        self.ctx.subscriptionApi.createSubscriptionFromInfo (\r\n            'latest', valueSubscriptionInfo, subscriptionOptions, false, true).subscribe( //types.widgetType.latest.value\r\n            (subscription) => {\r\n                valueSubscription = subscription;\r\n            }\r\n        );    \r\n    }*/\r\n    \r\n    function subscribeAttributes(type, entityType, entityId, key) { //retrieveMethod,\r\n        var valueSubscriptionInfo = [{\r\n            type:       type,\r\n            entityType: entityType,\r\n            entityId:   entityId\r\n        }];\r\n        \r\n        //if (retrieveMethod == 'attribute') {\r\n            valueSubscriptionInfo[0].attributes = [\r\n                {name: key}\r\n            ];\r\n        //} else {\r\n        //    valueSubscriptionInfo[0].timeseries = [\r\n        //        {name: key}\r\n        //    ];\r\n        //}\r\n        \r\n        var subscriptionOptions = {\r\n            callbacks: {\r\n                onDataUpdated: onDataUpdatedForSubscribe,\r\n                onDataUpdateError: onDataUpdateErrorForSubscribe\r\n            }\r\n        };\r\n        self.ctx.subscriptionApi.createSubscriptionFromInfo (\r\n            'latest', valueSubscriptionInfo, subscriptionOptions, false, true).subscribe( //types.widgetType.latest.value\r\n            (subscription) => {\r\n                valueSubscription = subscription;\r\n            }\r\n        );    \r\n    }\r\n    function subscribeTimeseries(type, entityType, entityId, key) { //retrieveMethod,\r\n        var valueSubscriptionInfo = [{\r\n            type:       type,\r\n            entityType: entityType,\r\n            entityId:   entityId\r\n        }];\r\n        \r\n        //if (retrieveMethod == 'attribute') {\r\n        //    valueSubscriptionInfo[0].attributes = [\r\n        //        {name: key}\r\n        //    ];\r\n        //} else {\r\n            valueSubscriptionInfo[0].timeseries = [\r\n                {name: key}\r\n            ];\r\n        //}\r\n        \r\n        var subscriptionOptions = {\r\n            callbacks: {\r\n                onDataUpdated: onDataUpdatedForSubscribe,\r\n                onDataUpdateError: onDataUpdateErrorForSubscribe\r\n            }\r\n        };\r\n        self.ctx.subscriptionApi.createSubscriptionFromInfo (\r\n            'latest', valueSubscriptionInfo, subscriptionOptions, false, true).subscribe( //types.widgetType.latest.value\r\n            (subscription) => {\r\n                valueSubscription = subscription;\r\n            }\r\n        );    \r\n    }\r\n    \r\n    // update attribute\r\n    function updateAttributes(entityType, entityId, attributeScope, key, value) {\r\n        let attributes = [];\r\n        attributes.push({\r\n            \"key\": key,         // attribute name,\r\n            \"value\": value      // attribute value\r\n        });\r\n\r\n        ////attributeService.saveEntityAttributes(self.ctx.datasources[0].entityType, self.ctx.datasources[0].entityId,\r\n        attributeService.saveEntityAttributes({\"entityType\":entityType, \"id\":entityId}, \r\n            attributeScope, attributes).subscribe(\r\n            function success() {\r\n                ////self.ctx.$scope.error = \"\";\r\n                if (settings.showResultMessage) {\r\n                        $scope.showSuccessToast(translate.instant('widgets.input-widgets.update-successful'), 1000, 'bottom', 'left', $scope.toastTargetId);\r\n                }\r\n                retrieveValue();  //self.ctx.$scope.originalValue = self.ctx.$scope.currentValue = value;\r\n            },\r\n            function fail(rejection) {\r\n                ////if (self.ctx.settings.showError) {\r\n                ////    self.ctx.$scope.error = rejection.status + \": \" + rejection.statusText;\r\n                ////}\r\n                if (settings.showResultMessage) {\r\n                        $scope.showErrorToast(translate.instant('widgets.input-widgets.update-failed'), 'bottom', 'left', $scope.toastTargetId);\r\n                }\r\n            }\r\n        );\r\n    }\r\n    \r\n    // update timeseries \r\n    function saveEntityTimeseries(entityType, entityId, telemetries) {\r\n        var telemetriesData = {};\r\n        for (var a = 0; a < telemetries.length; a++) {\r\n            if (typeof telemetries[a].value !== 'undefined' && telemetries[a].value !== null) {\r\n                telemetriesData[telemetries[a].key] = telemetries[a].value;\r\n            }\r\n        }\r\n        if (Object.keys(telemetriesData).length) {\r\n            var url = '/api/plugins/telemetry/' + entityType + '/' + entityId + '/timeseries/scope';\r\n            return http.post(url, telemetriesData);\r\n        }\r\n        return null;\r\n    }\r\n    function updateTimeseries(entityType, entityId, key, value) {\r\n        //var datasource = self.ctx.datasources[0];\r\n        let observable = saveEntityTimeseries(\r\n            entityType,     // datasource.entityType,\r\n            entityId,       // datasource.entityId,\r\n            [\r\n                {\r\n                    key: key,\r\n                    value: value\r\n                }\r\n            ]\r\n        );\r\n        if (observable) {\r\n            observable.subscribe(\r\n                function success() {\r\n                    ////self.ctx.$scope.error = \"\";\r\n                    if (settings.showResultMessage) {\r\n                        $scope.showSuccessToast(translate.instant('widgets.input-widgets.update-successful'), 1000, 'bottom', 'left', $scope.toastTargetId);\r\n                    }\r\n                    retrieveValue();    //self.ctx.$scope.originalValue = self.ctx.$scope.currentValue = value;\r\n                },\r\n                function fail() {\r\n                    ////if (self.ctx.settings.showError)\r\n                    ////    self.ctx.$scope.error = $translate.instant('widgets.input-widgets.update-failed');\r\n                    ////}\r\n                    if (settings.showResultMessage) {\r\n                        $scope.showErrorToast(translate.instant('widgets.input-widgets.update-failed'), 'bottom', 'left', $scope.toastTargetId);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    // RPC retrieve value\r\n    function rpcRetrieveValue(method, timeout) {\r\n        if (method && method.length) {\r\n            self.ctx.$scope.error = '';\r\n            self.ctx.controlApi.sendTwoWayCommand(method, null, timeout).subscribe(\r\n                function success(responseBody) {\r\n                    try {\r\n                        self.ctx.$scope.currentValue = self.ctx.$scope.originalValue = convertRetrievedValueFunction(responseBody);\r\n                        ////self.ctx.$scope.$digest(); // Error: $digest already in progress\r\n                    } catch (e){\r\n                        //self.ctx.$scope.error = 'convertRetrievedValueFunction(value) error!'\r\n                        $scope.showErrorToast(translate.instant(e), 'bottom', 'left', $scope.toastTargetId);\r\n                    }\r\n                },\r\n                function fail() {\r\n                    ////self.ctx.$scope.error = self.ctx.defaultSubscription.rpcErrorText;\r\n\t\t    $scope.showErrorToast(translate.instant(self.ctx.defaultSubscription.rpcErrorText), 'bottom', 'left', $scope.toastTargetId);\r\n                }\r\n            );\r\n        } else {\r\n            ////self.ctx.$scope.error = \"retrievedAttributeKeyOrMethodName is null.\";\r\n            $scope.showErrorToast(translate.instant('retrievedAttributeKeyOrMethodName is null.'), 'bottom', 'left', $scope.toastTargetId);\r\n        }\r\n    }\r\n    // RPC update value\r\n    function rpcUpdateValue(method, value, timeout) {\r\n        if (rpcUpdateStatus.executingUpdateValue) {\r\n            rpcUpdateStatus.scheduledValue = value;\r\n            return;\r\n        } else {\r\n            rpcUpdateStatus.scheduledValue = null;\r\n            rpcUpdateStatus.rpcValue = value;\r\n            rpcUpdateStatus.executingUpdateValue = true;\r\n        }\r\n        self.ctx.$scope.error = '';\r\n        self.ctx.controlApi.sendOneWayCommand(method, value, timeout).subscribe(\r\n            () => {\r\n                rpcUpdateStatus.executingUpdateValue = false;\r\n                if (rpcUpdateStatus.scheduledValue !== null && rpcUpdateStatus.scheduledValue != rpcUpdateStatus.rpcValue) {\r\n                    rpcUpdateValue(rpcUpdateStatus.scheduledValue);\r\n                } else {\r\n                    ////self.ctx.$scope.error = \"\";\r\n                    if (settings.showResultMessage) {\r\n\t\t\t$scope.showSuccessToast(translate.instant('widgets.input-widgets.update-successful'), 1000, 'bottom', 'left', $scope.toastTargetId);\r\n                    }\r\n                    retrieveValue(); // self.ctx.$scope.originalValue = self.ctx.$scope.currentValue = value;\r\n                }\r\n            },\r\n            () => {\r\n                rpcUpdateStatus.executingUpdateValue = false;\r\n                ////if (self.ctx.settings.showError) {\r\n                ////    self.ctx.$scope.error = self.ctx.defaultSubscription.rpcErrorText;\r\n                ////}\r\n                if (settings.showResultMessage) {\r\n\t\t    $scope.showErrorToast(translate.instant('widgets.input-widgets.update-failed'), 'bottom', 'left', $scope.toastTargetId);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // update value\r\n\r\n    self.ctx.$scope.updateValue = function(option) {\r\n        var newValue = convertUpdatedValueFunction($scope.currentValue);\r\n        //console.log(\"updateValue():\", newValue);\r\n        \r\n        if (newValue && newValue.length){\r\n            if (settings.updateMethod === \"SHARED_SCOPE\" || settings.updateMethod === \"SERVER_SCOPE\") {\r\n                updateAttributes(\"DEVICE\", //types.entityType.device, \r\n                    self.ctx.defaultSubscription.targetDeviceId, \r\n                    settings.updateMethod, \r\n                    updateAttributeKeyOrMethodName, //settings.patternParamOfUpdateAttributeKey, \r\n                    newValue);\r\n                    \r\n            } else if (settings.updateMethod === \"timeseries\") {\r\n                updateTimeseries(\"DEVICE\", // types.entityType.device,  types.constant.js\r\n                    self.ctx.defaultSubscription.targetDeviceId, \r\n                    updateAttributeKeyOrMethodName, //settings.patternParamOfUpdateTimeseriesKey, \r\n                    newValue);\r\n                    \r\n            } else if (settings.updateMethod === \"rpc\") {\r\n                rpcUpdateValue(updateAttributeKeyOrMethodName, //settings.patternParamOfUpdateRPCMethodName, \r\n                    newValue, \r\n                    settings.requestTimeout);\r\n                \r\n            } else {\r\n                self.ctx.$scope.error = \"updateMethod is error!\";\r\n    \r\n            }\r\n        }\r\n    }\r\n\r\n    // retrieve value\r\n    var firstRetrieveValue = true;\r\n    function retrieveValue() {\r\n        let rpcEnabled = self.ctx.defaultSubscription.rpcEnabled;\r\n        let isSimulated = self.ctx.$scope.widgetEditMode;\r\n        if (!rpcEnabled) {\r\n            self.ctx.$scope.error = 'Target device is not set!';\r\n        } else {\r\n            if (!isSimulated) {\r\n                if (settings.retrieveMethod == 'rpc') {\r\n                    rpcRetrieveValue(retrievedAttributeKeyOrMethodName, settings.requestTimeout); //settings.patternParamOfRetrieveRPCMethodName\r\n                } else if (settings.retrieveMethod == 'attribute') {\r\n                    if (firstRetrieveValue) {\r\n                        subscribeAttributes(\"entity\", // types.datasourceType.entity, in types.constant.js\r\n                            \"DEVICE\", //types.entityType.device, in types.constant.js\r\n                            self.ctx.defaultSubscription.targetDeviceId, \r\n                            retrievedAttributeKeyOrMethodName); //settings.patternParamOfRetrieveAttributeKey\r\n                    }\r\n                } else if (settings.retrieveMethod == 'timeseries') {\r\n                    if (firstRetrieveValue) {\r\n                        subscribeTimeseries(\"entity\", // types.datasourceType.entity, in types.constant.js\r\n                            \"DEVICE\", //types.entityType.device, in types.constant.js\r\n                            self.ctx.defaultSubscription.targetDeviceId, \r\n                            retrievedAttributeKeyOrMethodName); //settings.patternParamOfRetrieveTimeseriesKey\r\n                    }\r\n                }\r\n            } \r\n        }\r\n        \r\n        firstRetrieveValue = false;\r\n    }\r\n    \r\n    retrieveValue();\r\n};\r\n\r\nself.onResize = function() {\r\n    $scope.smallWidthContainer = (self.ctx.$container[0].offsetWidth < 320) ? true : false;\r\n    $scope.changeAlignment = false;\r\n};\r\n\r\nself.onDestory = function() {\r\n    if (valueSubscription) {\r\n        self.ctx.subscriptionApi.removeSubscription(valueSubscription.id);\r\n    }\r\n};\r\n\r\n/*self.onDataUpdated = function() {\r\n    try{\r\n        self.ctx.$scope.currentValue = self.ctx.$scope.originalValue = self.ctx.data[0].data[0][1];\r\n        self.ctx.$scope.$digest();\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}*/\r\n\r\n/*self.typeParameters = function() {\r\n    return {\r\n        maxDatasources: 1, // Maximum allowed datasources for this widget, -1 - unlimited\r\n        maxDataKeys: 1 //Maximum allowed data keys for this widget, -1 - unlimited\r\n    }\r\n};*/\r\n",
    "settingsSchema": "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"title\": {\r\n                \"title\": \"Widget title\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            },\r\n            \r\n            \"patternCommonParam\": {\r\n                \"title\": \"Pattern common param\",\r\n                \"type\": \"string\",\r\n                \"default\": \"0\"\r\n            },\r\n\r\n            \"retrieveMethod\": {\r\n                \"title\": \"Retrieve string value using method\",\r\n                \"type\": \"string\",\r\n                \"default\": \"rpc\"\r\n            },\r\n            \"patternParamOfRetrieveAttributeKey\": {\r\n                \"title\": \"Pattern param of retrieved Attribute key\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            },\r\n            \"patternParamOfRetrieveTimeseriesKey\": {\r\n                \"title\": \"Pattern param of retrieved Timeseries key\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            },\r\n            \"patternParamOfRetrieveRPCMethodName\": {\r\n                \"title\": \"Pattern param of retrieved value using server-side RPC method name\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            },\r\n                \"convertRetrievedAttributeKeyOrMethodNameFunction\": {\r\n                    \"title\": \"Convert function, f(stateParams, patternParamOfetrievedAttributeKeyOrMethodName, patternCommonParam), returns retireved attribute key, time-series data key or server-side RPC method name\",\r\n                    \"type\": \"string\",\r\n                    \"default\": \"return patternParamOfetrievedAttributeKeyOrMethodName + patternCommonParam; /* console.log(value); */\"\r\n                },\r\n            \"convertRetrievedValueFunction\": {\r\n                \"title\": \"Parse value function, f(value), returns string\",\r\n                \"type\": \"string\",\r\n                \"default\": \"return value;\"\r\n            },\r\n            \r\n            \"updateMethod\": {\r\n                \"title\": \"Update string value using method\",\r\n                \"type\": \"string\",\r\n                \"default\": \"rpc\"\r\n            },\r\n            \"patternParamOfUpdateAttributeKey\": {\r\n                \"title\": \"Pattern param of updated Attribute key\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            },\r\n            \"patternParamOfUpdateTimeseriesKey\": {\r\n                \"title\": \"Pattern param of updated Timeseries key\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            },\r\n            \"patternParamOfUpdateRPCMethodName\": {\r\n                \"title\": \"Pattern param of updated server-side RPC method name\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            },\r\n                \"convertUpdatedAttributeKeyOrMethodNameFunction\": {\r\n                    \"title\": \"Convert function, f(stateParams, patternParamOfUpdateAttributeKeyOrMethodName, patternCommonParam), returns updated attribute key, time-series data key or server-side RPC method name\",\r\n                    \"type\": \"string\",\r\n                    \"default\": \"return patternParamOfUpdateAttributeKeyOrMethodName + patternCommonParam; /* console.log(value); */\"\r\n                },\r\n            \"requestTimeout\": {\r\n                \"title\": \"RPC request timeout\",\r\n                \"type\": \"number\",\r\n                \"default\": 5000\r\n            },\r\n            \"convertUpdatedValueFunction\": {\r\n                \"title\": \"Convert function, f(value), returns updated value\",\r\n                \"type\": \"string\",\r\n                \"default\": \"return value;\"\r\n            },\r\n\r\n            \"showResultMessage\":{\r\n                \"title\":\"Show result message\",\r\n                \"type\":\"boolean\",\r\n                \"default\":true\r\n            },\r\n            \"requiredErrorMessage\": {\r\n                \"title\": \"'Required' error message\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            }\r\n        },\r\n        \"required\": [\r\n            \"patternCommonParam\",\r\n            \"retrieveMethod\",\r\n            \"convertRetrievedAttributeKeyOrMethodNameFunction\",\r\n            \"updateMethod\",\r\n            \"convertUpdatedAttributeKeyOrMethodNameFunction\"\r\n        ]\r\n    },\r\n    \"form\": [\r\n        \"title\",\r\n\r\n        \"patternCommonParam\",\r\n\r\n        {\r\n            \"key\": \"retrieveMethod\",\r\n            \"type\": \"rc-select\",\r\n            \"multiple\": false,\r\n            \"items\": [\r\n                {\r\n                    \"value\": \"none\",\r\n                    \"label\": \"Don't retrieve\"\r\n                },\r\n                {\r\n                    \"value\": \"attribute\",\r\n                    \"label\": \"Subscribe for attribute\"\r\n                },\r\n                {\r\n                    \"value\": \"timeseries\",\r\n                    \"label\": \"Subscribe for timeseries\"\r\n                },\r\n                {\r\n                    \"value\": \"rpc\",\r\n                    \"label\": \"Call server-dide RPC to get value\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"key\": \"patternParamOfRetrieveAttributeKey\",\r\n            \"condition\": \"model.retrieveMethod === 'attribute' || model.retrieveMethod === 'SHARED_SCOPE' || model.retrieveMethod === 'SERVER_SCOPE'\"\r\n        },\r\n        {\r\n            \"key\": \"patternParamOfRetrieveTimeseriesKey\",\r\n            \"condition\": \"model.retrieveMethod === 'timeseries'\"\r\n        },\r\n        {\r\n            \"key\": \"patternParamOfRetrieveRPCMethodName\",\r\n            \"condition\": \"model.retrieveMethod === 'rpc'\"\r\n        },\r\n            {\r\n                \"key\": \"convertRetrievedAttributeKeyOrMethodNameFunction\",\r\n                \"type\": \"javascript\"\r\n            },\r\n        {\r\n            \"key\": \"convertRetrievedValueFunction\",\r\n            \"type\": \"javascript\"\r\n        },\r\n        {\r\n            \"type\": \"help\",\r\n            \"description\": \"<I><small>Note: Retrieve the above attributes from device.</small></I>\"\r\n        },\r\n        \r\n        {\r\n            \"key\": \"updateMethod\",\r\n            \"type\": \"rc-select\",\r\n            \"multiple\": false,\r\n            \"items\": [\r\n                {\r\n                    \"value\": \"SHARED_SCOPE\",\r\n                    \"label\": \"Update shared attribute\"\r\n                },\r\n                {\r\n                    \"value\": \"SERVER_SCOPE\",\r\n                    \"label\": \"Update server attribute\"\r\n                },\r\n                {\r\n                    \"value\": \"timeseries\",\r\n                    \"label\": \"Update timeseries\"\r\n                },\r\n                {\r\n                    \"value\": \"rpc\",\r\n                    \"label\": \"Call server-side RPC to set value\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"key\": \"patternParamOfUpdateAttributeKey\",\r\n            \"condition\": \"model.updateMethod === 'SHARED_SCOPE' || model.updateMethod === 'SERVER_SCOPE'\"\r\n        },\r\n        {\r\n            \"key\": \"patternParamOfUpdateTimeseriesKey\",\r\n            \"condition\": \"model.updateMethod === 'timeseries'\"\r\n        },\r\n        {\r\n            \"key\": \"patternParamOfUpdateRPCMethodName\",\r\n            \"condition\": \"model.updateMethod === 'rpc'\"\r\n        },\r\n            {\r\n                \"key\": \"convertUpdatedAttributeKeyOrMethodNameFunction\",\r\n                \"type\": \"javascript\"\r\n            },\r\n        {\r\n            \"key\": \"convertUpdatedValueFunction\",\r\n            \"type\": \"javascript\"\r\n        },\r\n        {\r\n            \"type\": \"help\",\r\n            \"description\": \"<I><small>Note: Call the above method and prameters to update value to device.</small></I>\"\r\n        },\r\n        \r\n        \"requestTimeout\",\r\n        \r\n        \"showResultMessage\",\r\n        \"requiredErrorMessage\"\r\n    ]\r\n}\r\n",
    "dataKeySettingsSchema": "{}\r\n",
    "defaultConfig": "{\"showTitle\":false,\"backgroundColor\":\"#ffffff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"retrieveMethod\":\"rpc\",\"updateMethod\":\"rpc\",\"requestTimeout\":5000,\"showResultMessage\":true,\"patternCommonParam\":\"0\",\"convertRetrievedAttributeKeyOrMethodNameFunction\":\"return patternParamOfetrievedAttributeKeyOrMethodName + patternCommonParam; /* console.log(value); */\",\"convertRetrievedValueFunction\":\"return value;\",\"convertUpdatedAttributeKeyOrMethodNameFunction\":\"return patternParamOfUpdateAttributeKeyOrMethodName + patternCommonParam; /* console.log(value); */\",\"convertUpdatedValueFunction\":\"return value;\",\"title\":\"Update time value with pattern key\"},\"title\":\"Update time value with pattern key\",\"showTitleIcon\":false,\"titleIcon\":\"more_horiz\",\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{},\"targetDeviceAliases\":[],\"enableDataExport\":true,\"widgetCss\":\"\",\"pageSize\":1024,\"noDataDisplayMessage\":\"\"}"
  }
}