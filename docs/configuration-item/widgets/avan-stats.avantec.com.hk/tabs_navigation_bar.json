{
  "alias": "tabs_navigation_bar",
  "name": "Tabs navigation bar",
  "image": null,
  "description": null,
  "descriptor": {
    "type": "rpc",
    "sizeX": 9.5,
    "sizeY": 2,
    "resources": [],
    "templateHtml": "<div class=\"my-tbs-navigation\" fxFlex fxLayout=\"column\"\r\n    style=\"height: 100%;\"\r\n    fxLayoutAlign=\"space-around stretch\">\r\n\r\n    <div fxFlex=\"{{showTitle ? 20 : 0}}\"\r\n        [ngStyle]=\"{paddingTop: showTitle ? '5px': '0px'}\"\r\n        class=\"title-container\" fxLayout=\"row\"\r\n        fxLayoutAlign=\"start center\" [fxShow]=\"showTitle\">\r\n        <span class=\"button-title\">{{title}}</span>\r\n    </div>\r\n\r\n    <div fxFlex=\"{{showTitle ? 80 : 100}}\"\r\n        [ngStyle]=\"{paddingTop: showTitle ? '0px': '0px'}\"\r\n        class=\"button-container\" fxLayout=\"column\"\r\n        fxLayoutAlign=\"center center\">\r\n\r\n        <mat-tab-group mat-stretch-tabs \r\n             [headerPosition]=\"position\" [attr.mat-align-tabs]=\"align\"\r\n             [color]=\"color\" [backgroundColor]=\"bgColor\"\r\n            animationDuration=\"0ms\"\r\n            (selectedTabChange)=\"onSelectedTabChange($event)\"\r\n            [selectedIndex]=\"tabsSelected\">\r\n            <mat-tab *ngFor=\"let tab of tabs\">\r\n                <ng-template mat-tab-label>\r\n                    <div *ngIf=\"tab.icon\">\r\n                        <mat-icon class=\"example-tab-icon\">\r\n                            {{tab.icon}}</mat-icon>\r\n                    </div>{{tab.name}}\r\n                </ng-template>\r\n            </mat-tab>\r\n        </mat-tab-group>\r\n    </div>\r\n\r\n    <div class=\"error-container\"\r\n        [ngStyle]=\"{'background': error?.length ? 'rgba(255,255,255,0.25)' : 'none'}\"\r\n        fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n        <span class=\"button-error\">{{ error }}</span>\r\n    </div>\r\n</div>",
    "templateCss": ".my-tbs-navigation {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.my-tbs-navigation .title-container {\r\n    font-size: 0.8em;\r\n    font-weight: normal;\r\n    white-space: nowrap;\r\n    opacity: 0.5;\r\n    /*margin: 10px;*/\r\n    margin: 0px;\r\n}\r\n\r\n.my-tbs-navigation .button-container{\r\n    /*min-width: 80%;*/\r\n    min-width: 40%;\r\n}\r\n\r\n/*.my-tbs-navigation .button-container .mat-tab-group {*/\r\n/*    width: 100%;*/\r\n/*}*/\r\n\r\n.my-tbs-navigation .button-container .mat-tab-label {\r\n    padding: 0 2px;\r\n    /*min-width: 80px*/\r\n}\r\n\r\n.my-tbs-navigation .button-container .example-tab-icon{\r\n  margin-right: 0px;\r\n}\r\n\r\n.my-tbs-navigation .button-container .mat-button{\r\n    /*width: 100%;*/\r\n    margin: 0;\r\n    padding: 0 0px;\r\n}\r\n\r\n.my-tbs-navigation .button-container .material-icons, .material-icons-round {\r\n    /*font-size: 24px;*/\r\n    font-size: 16px;\r\n}\r\n\r\n.my-tbs-navigation .button-container .mat-icon {\r\n    /*height: 24px;*/\r\n    /*width: 24px;*/\r\n    height: 16px;\r\n    width: 16px;\r\n}\r\n\r\n.my-tbs-navigation .button-container .mat-mdc-tab-header .mdc-tab {\r\n    /*height: 48px;*/\r\n    height: 20px;\r\n}\r\n\r\n.my-tbs-navigation .button-container .mdc-tab {\r\n    /*min-width: 90px;*/\r\n    /*padding-right: 24px;*/\r\n    /*padding-left: 24px;*/\r\n    min-width: 50px;\r\n    padding-right: 4px;\r\n    padding-left: 4px;\r\n}\r\n\r\n.my-tbs-navigation .error-container {\r\n    position: absolute;\r\n    top: 2%;\r\n    right: 0;\r\n    left: 0;\r\n    z-index: 4;\r\n    height: 14px;\r\n}\r\n\r\n.my-tbs-navigation .error-container .button-error {\r\n    color: #ff3315;\r\n    white-space: nowrap;\r\n}\r\n",
    "controllerScript": "// v.2.4, 2023-09-25 17:00\r\n\r\nself.onInit = function() {\r\n    self.ctx.$scope.onSelectedTabChange = function(event) {\r\n        //console.log(\"self.ctx\", self.ctx);\r\n        //console.log(\"event=\", event);\r\n        \r\n        //console.log(\"self.ctx.$scope.tabsSelected=\", self.ctx.$scope.tabsSelected);\r\n        //console.log(\"event.index=\", event.index);\r\n        \r\n        if (self.ctx.$scope.tabsSelected == event.index) {\r\n            return;\r\n        } else {\r\n            self.ctx.$scope.tabsSelected = event.index;\r\n        }\r\n        \r\n        let entityInfo = self.ctx.actionsApi.getActiveEntityInfo();\r\n        //entityInfo.entityId, entityInfo.entityLabel, entityInfo.entityName\r\n        //console.log(entityInfo);\r\n        \r\n        const id_ = entityInfo ? entityInfo.id : null\r\n            , entityType_ = entityInfo ? entityInfo.entityType : null\r\n            , entityId = {entityType: entityType_, id: id_}\r\n            , entityName = entityInfo ? entityInfo.entityName : null\r\n            , entityLabel = entityInfo ? entityInfo.entityLabel : null;\r\n\r\n        if (!self.ctx.isEdit && (event.index<self.ctx.$scope.tabs.length)) //entityInfo &&\r\n        {\r\n            const descriptor = self.ctx.$scope.tabs[event.index];\r\n            //console.log(\"descriptor=\", descriptor);\r\n            if (descriptor) {\r\n                //event.stopPropagation();\r\n                // self.ctx.actionsApi.handleWidgetAction($event, descriptor, entityId, entityName);\r\n                self.ctx.actionsApi.handleWidgetAction(event, descriptor,\r\n                    entityId, entityName, null, entityLabel);\r\n            }\r\n        }\r\n    };\r\n\r\n    ////self.ctx.ngZone.run(function() {\r\n       init();\r\n    //  self.ctx.detectChanges(true);\r\n    //});\r\n};\r\n\r\nfunction init() {\r\n    let utils       = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('utils'));\r\n    //let types       = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('types'));\r\n    //let toast       = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('toast'));\r\n    //let translate   = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('translate'));\r\n    //let $q          = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('$q'));\r\n    //let http        = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('http'));\r\n    //let attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\r\n    //let rpcUpdateStatus = {};\r\n    let settings = utils.deepClone(self.ctx.settings) || {}; \r\n    \r\n    self.ctx.$scope.toastTargetId = 'input-widget' + utils.guid();\r\n    self.ctx.$scope.showTitle = settings.title && settings.title.length ? true : false; ////utils.defaultValue(settings.title, true);\r\n    self.ctx.$scope.title = settings.title;\r\n    self.ctx.$scope.position = settings.position;\r\n    self.ctx.$scope.align = settings.align;\r\n    //self.ctx.$scope.minWidth = settings.minWidth;\r\n    //self.ctx.$scope.isPrimary = settings.isPrimary; //\r\n    self.ctx.$scope.color = settings.color; //\r\n    self.ctx.$scope.bgColor = settings.bgColor;\r\n    self.ctx.$scope.tabs = self.ctx.actionsApi.getActionDescriptors(\"elementClick\");  ////actionDescriptors = ////settings.tabs;\r\n    self.ctx.$scope.tabsSelected = settings.tabsSelected;\r\n    if (self.ctx.$scope.tabsSelected<0) {\r\n        self.ctx.$scope.tabsSelected = 0;\r\n    } else if (self.ctx.$scope.tabsSelected>=self.ctx.$scope.tabs.length) {\r\n        self.ctx.$scope.tabsSelected = self.ctx.$scope.tabs.length-1;\r\n    }\r\n    \r\n    // console.log(\"actionDescriptors=\", self.ctx.$scope.tabs);\r\n\r\n    /*self.ctx.$scope.tabGroupStyle = {};\r\n    self.ctx.$scope.customCheckedStyle['min-width'] = '40px';\r\n    self.ctx.$scope.customCheckedStyle['padding']   = '0 2px';\r\n    if (self.ctx.settings.optionStyle.orientation === 'column') {\r\n        self.ctx.$scope.customCheckedStyle['width']     = '100%';\r\n        self.ctx.$scope.customCheckedStyle['margin']    = 0;\r\n    } else {\r\n        self.ctx.$scope.customCheckedStyle['width']     = 100/self.ctx.settings.options.length + '%';\r\n        self.ctx.$scope.customCheckedStyle['margin']    = 0;\r\n    }\r\n    if (self.ctx.settings.isPrimary === false) {\r\n        self.ctx.$scope.tabGroupStyle['background-color']  = self.ctx.$scope.bgColor;\r\n        self.ctx.$scope.tabGroupStyle['color']             = self.ctx.$scope.color;\r\n    }*/\r\n\r\n    //console.log(\"onInit\", self.ctx.$scope.align, self.ctx.$scope.position);\r\n}\r\n\r\nself.onResize = function() {\r\n    //    min-width: 80%\r\n};\r\n\r\nself.actionSources = function() {\r\n    return {\r\n        'elementClick': {\r\n            name: 'widget-action.element-click',\r\n            multiple: true\r\n        }\r\n    };\r\n};\r\n\r\nself.onDestory = function() {\r\n};\r\n\r\n/*self.onDataUpdated = function() {\r\n}*/\r\n\r\n/*self.typeParameters = function() {\r\n    return {\r\n        maxDatasources: 1, // Maximum allowed datasources for this widget, -1 - unlimited\r\n        maxDataKeys: 1 //Maximum allowed data keys for this widget, -1 - unlimited\r\n    }\r\n};*/\r\n",
    "settingsSchema": "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"title\": {\r\n                \"title\": \"Widget title\",\r\n                \"type\": \"string\",\r\n                \"default\": \"\"\r\n            },\r\n            \r\n            \"tabsSelected\": {\r\n                \"title\": \"Tabs selected\",\r\n                \"type\": \"integer\",\r\n                \"default\": \"0\"\r\n            },\r\n            \"position\": {\r\n                \"title\": \"Text position\",\r\n                \"type\": \"string\",\r\n                \"default\": \"above\"\r\n            },\r\n            \"align\": {\r\n                \"title\": \"Align\",\r\n                \"type\": \"string\",\r\n                \"default\": \"center\"\r\n            },\r\n            \"color\": {\r\n                \"type\": \"string\",\r\n                \"title\": \"Tabs color\",\r\n                \"default\": \"\"\r\n            },\r\n            \"bgColor\": {\r\n                \"type\": \"string\",\r\n                \"title\": \"Tabs background color\",\r\n                \"default\": \"\"\r\n            }\r\n        },\r\n            \r\n        \"required\": [\r\n            \"tabsSelected\",\r\n            \"position\",\r\n            \"align\"\r\n        ]\r\n    },\r\n\r\n    \"form\": [\r\n        \"title\",\r\n\r\n        \"tabsSelected\",\r\n        {\r\n            \"key\": \"position\",\r\n            \"type\": \"rc-select\",\r\n            \"multiple\": false,\r\n            \"items\": [\r\n                {\r\n                    \"value\": \"above\",\r\n                    \"label\": \"above\"\r\n                },\r\n                {\r\n                    \"value\": \"below\",\r\n                    \"label\": \"below\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"key\": \"align\",\r\n            \"type\": \"rc-select\",\r\n            \"multiple\": false,\r\n            \"items\": [\r\n                {\r\n                    \"value\": \"start\",\r\n                    \"label\": \"start\"\r\n                },\r\n                {\r\n                    \"value\": \"center\",\r\n                    \"label\": \"center\"\r\n                },\r\n                {\r\n                    \"value\": \"end\",\r\n                    \"label\": \"end\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"key\": \"bgColor\",\r\n            \"type\": \"rc-select\",\r\n            \"multiple\": false,\r\n            \"items\": [\r\n                {\r\n                    \"value\": \"\",\r\n                    \"label\": \"null\"\r\n                },\r\n                {\r\n                    \"value\": \"primary\",\r\n                    \"label\": \"primary\"\r\n                },\r\n                {\r\n                    \"value\": \"accent\",\r\n                    \"label\": \"accent\"\r\n                },\r\n                {\r\n                    \"value\": \"warn\",\r\n                    \"label\": \"warn\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"type\": \"help\",\r\n            \"description\": \"Refer to https://material.angular.io/guide/theming#themes for more information about primary, accent and warn.\"\r\n        },\r\n        {\r\n            \"key\": \"color\",\r\n            \"type\": \"rc-select\",\r\n            \"multiple\": false,\r\n            \"items\": [\r\n                {\r\n                    \"value\": \"\",\r\n                    \"label\": \"null\"\r\n                },\r\n                {\r\n                    \"value\": \"primary\",\r\n                    \"label\": \"primary\"\r\n                },\r\n                {\r\n                    \"value\": \"accent\",\r\n                    \"label\": \"accent\"\r\n                },\r\n                {\r\n                    \"value\": \"warn\",\r\n                    \"label\": \"warn\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"type\": \"help\",\r\n            \"description\": \"Refer to https://material.angular.io/guide/theming#themes for more information about primary, accent and warn.\"\r\n        }\r\n    ]\r\n}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#FFFFFF\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"position\":\"above\",\"align\":\"center\",\"tabsSelected\":0},\"title\":\"Tabs navigation bar\",\"actions\":{\"elementClick\":[{\"name\":\"AAAA\",\"icon\":\"now_widgets\",\"useShowWidgetActionFunction\":null,\"showWidgetActionFunction\":\"return true;\",\"type\":\"custom\",\"customFunction\":\"var title;\\r\\nvar content;\\r\\n// if (entityName) {\\r\\n//   if (additionalParams && additionalParams.entity) {\\r\\n//     var entity = additionalParams.entity;\\r\\n//     if (entity.id) {\\r\\n//       content += '<br><b>Entity type</b>: ' + entity.id.entityType;\\r\\n//     }\\r\\n//     if (!isNaN(entity.temperature) && entity.temperature !== '') {\\r\\n//       content += '<br><b>Temperature</b>: ' + entity.temperature + ' °C';\\r\\n//     }\\r\\n//   }\\r\\n// } else {\\r\\n//   title = 'No entity information available';\\r\\n//   content = '<b>No entity information available</b>';\\r\\n// }\\r\\n\\r\\ntitle = 'Details';\\r\\ncontent = '<b>Tab label</b>: ' + 'AAAA';\\r\\n\\r\\nshowAlertDialog(title, content);\\r\\n\\r\\nfunction showAlertDialog(title, content) {\\r\\n  setTimeout(function() {\\r\\n    widgetContext.dialogs.alert(title, content).subscribe();\\r\\n  }, 100);\\r\\n}\\r\\n\",\"openInSeparateDialog\":false,\"openInPopover\":false,\"id\":\"e6bd9a5b-b2fa-233a-f7f7-271e9c742194\"},{\"name\":\"BBBB\",\"icon\":\"extension\",\"useShowWidgetActionFunction\":null,\"showWidgetActionFunction\":\"return true;\",\"type\":\"custom\",\"customFunction\":\"var title;\\r\\nvar content;\\r\\n// if (entityName) {\\r\\n//   if (additionalParams && additionalParams.entity) {\\r\\n//     var entity = additionalParams.entity;\\r\\n//     if (entity.id) {\\r\\n//       content += '<br><b>Entity type</b>: ' + entity.id.entityType;\\r\\n//     }\\r\\n//     if (!isNaN(entity.temperature) && entity.temperature !== '') {\\r\\n//       content += '<br><b>Temperature</b>: ' + entity.temperature + ' °C';\\r\\n//     }\\r\\n//   }\\r\\n// } else {\\r\\n//   title = 'No entity information available';\\r\\n//   content = '<b>No entity information available</b>';\\r\\n// }\\r\\n\\r\\ntitle = 'Details';\\r\\ncontent = '<b>Tab label</b>: ' + 'BBBB';\\r\\n\\r\\nshowAlertDialog(title, content);\\r\\n\\r\\nfunction showAlertDialog(title, content) {\\r\\n  setTimeout(function() {\\r\\n    widgetContext.dialogs.alert(title, content).subscribe();\\r\\n  }, 100);\\r\\n}\\r\\n\",\"openInSeparateDialog\":false,\"openInPopover\":false,\"id\":\"2fc2648c-0071-5a04-437b-2a7ed2240a69\"},{\"name\":\"CCCC\",\"icon\":\"bedroom_baby\",\"useShowWidgetActionFunction\":null,\"showWidgetActionFunction\":\"return true;\",\"type\":\"custom\",\"customFunction\":\"var title;\\r\\nvar content;\\r\\n// if (entityName) {\\r\\n//   if (additionalParams && additionalParams.entity) {\\r\\n//     var entity = additionalParams.entity;\\r\\n//     if (entity.id) {\\r\\n//       content += '<br><b>Entity type</b>: ' + entity.id.entityType;\\r\\n//     }\\r\\n//     if (!isNaN(entity.temperature) && entity.temperature !== '') {\\r\\n//       content += '<br><b>Temperature</b>: ' + entity.temperature + ' °C';\\r\\n//     }\\r\\n//   }\\r\\n// } else {\\r\\n//   title = 'No entity information available';\\r\\n//   content = '<b>No entity information available</b>';\\r\\n// }\\r\\n\\r\\ntitle = 'Details';\\r\\ncontent = '<b>Tab label</b>: ' + 'CCCC';\\r\\n\\r\\nshowAlertDialog(title, content);\\r\\n\\r\\nfunction showAlertDialog(title, content) {\\r\\n  setTimeout(function() {\\r\\n    widgetContext.dialogs.alert(title, content).subscribe();\\r\\n  }, 100);\\r\\n}\\r\\n\",\"openInSeparateDialog\":false,\"openInPopover\":false,\"id\":\"c7644acb-0f1e-18ab-edf0-71b0204c62e9\"}]},\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableDataExport\":true,\"widgetStyle\":{},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
  }
}