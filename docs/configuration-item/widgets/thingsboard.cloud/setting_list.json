{
  "alias": "setting_list",
  "name": "Setting list",
  "image": null,
  "description": null,
  "descriptor": {
    "type": "rpc",
    "sizeX": 9,
    "sizeY": 3.5,
    "resources": [],
    "templateHtml": "<div class=\"tb-rpc-button\" fxLayout=\"column\">\r\n    <div fxFlex=\"{{showTitle ? '1.1em' : '0em'}}\"\r\n        [ngStyle]=\"{paddingTop: showTitle ? '5px': '0px'}\"\r\n        class=\"title-container\" fxLayout=\"row\"\r\n        fxLayoutAlign=\"start center\" [fxShow]=\"showTitle\">\r\n        <span class=\"button-title\">{{title}}</span>\r\n    </div>\r\n    <div fxFlex\r\n        [ngStyle]=\"{paddingTop: showTitle ? '0px': '5px'}\"\r\n        class=\"button-container\" fxLayout=\"column\"\r\n        fxLayoutAlign=\"start center\">\r\n\r\n        <mat-selection-list #shoes [multiple]=\"false\"\r\n            (selectionChange)=\"listSelectionChange(shoes.selectedOptions.selected[0].value)\"\r\n            id=\"list_of_days_of_weeks\">\r\n            <mat-list-option\r\n                *ngFor=\"let item of settingList; index as index; last as last\"\r\n                [value]=\"index\"\r\n                [disabled]=\"isDsiabledListOption(index)\">\r\n                <div mat-line>\r\n                    <mat-icon mat-list-icon matListItemIcon>{{item.icon}}\r\n                    </mat-icon> &nbsp;\r\n                    <span class=\"setting-name\">{{item.text}}</span>\r\n                    <span> &gt; </span>\r\n                </div>\r\n                <mat-divider [inset]=\"true\" *ngIf=\"!last\">\r\n                </mat-divider>\r\n            </mat-list-option>\r\n        </mat-selection-list>\r\n\r\n    </div>\r\n    <div class=\"error-container\"\r\n        [ngStyle]=\"{'background': error?.length ? 'rgba(255,255,255,0.25)' : 'none'}\"\r\n        fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n        <span class=\"button-error\">{{ error }}</span>\r\n    </div>\r\n</div>",
    "templateCss": ".tb-rpc-button {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.tb-rpc-button .title-container {\r\n    font-size: 0.8em;\r\n    font-weight: normal;\r\n    white-space: nowrap;\r\n    opacity: 0.5;\r\n    margin: 0;\r\n}\r\n\r\n.tb-rpc-button .button-container div{\r\n    min-width: 80%\r\n}\r\n\r\n/* TC 20221020 */\r\n.tb-rpc-button .button-container mat-action-list{\r\n    font-size: 1em;\r\n    font-weight: bold;\r\n    line-height: 1.6;\r\n    color: #333333;\r\n    \r\n    width: 100%;\r\n}\r\n\r\n/* TC 20230523 */\r\n.tb-rpc-button .button-container mat-selection-list{\r\n    font-size: 1em;\r\n    font-weight: bold;\r\n    line-height: 1.6;\r\n    color: #333333;\r\n    \r\n    width: 100%;\r\n}\r\n\r\n/* TC 20230523 */\r\n.tb-rpc-button .mdc-list-item__end.ng-star-inserted {\r\n    visibility: hidden;\r\n}\r\n\r\n.tb-rpc-button .button-container .mat-list-base .mat-list-item.mat-list-item-with-avatar, .mat-list-base .mat-list-option.mat-list-item-with-avatar {\r\n    height: 2.4em;\r\n}\r\n\r\n.tb-rpc-button .button-container .mat-line\r\n{\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.tb-rpc-button .button-container .mat-button{\r\n    width: 100%;\r\n    margin: 0;\r\n}\r\n\r\n.tb-rpc-button .button-container .mat-button{\r\n    padding: 0 0px;\r\n}\r\n\r\n.tb-rpc-button .error-container {\r\n    position: absolute;\r\n    top: 2%;\r\n    right: 0;\r\n    left: 0;\r\n    z-index: 4;\r\n    height: 14px;\r\n}\r\n\r\n.tb-rpc-button .error-container .button-error {\r\n    color: #ff3315;\r\n    white-space: nowrap;\r\n}\r\n\r\n.tb-rpc-button .mdc-list-item--with-trailing-radio.mdc-list-item {\r\n    /*padding-right: 0;*/\r\n    padding-right: 16px;\r\n}\r\n\r\n.tb-rpc-button .mdc-list-item--with-trailing-radio .mdc-list-item__end {\r\n    /*margin-left: 24px;*/\r\n    /*margin-right: 8px;*/\r\n    margin-left: 0;\r\n    margin-right: 0;\r\n}\r\n\r\n.tb-rpc-button  .mat-mdc-list-option .mdc-radio {\r\n    /*padding: calc((40px - 20px) / 2);*/\r\n    /*padding: calc((var(--mdc-radio-state-layer-size, 40px) - 20px) / 2);*/\r\n    /*padding-top: ;*/\r\n    /*padding-right: ;*/\r\n    /*padding-bottom: ;*/\r\n    /*padding-left: ;*/\r\n    padding: 0;\r\n    /*width: 0;*/\r\n    padding-right: 0;\r\n    padding-left: 0;\r\n}\r\n\r\n.tb-rpc-button .mat-mdc-list-option .mdc-radio .mdc-radio__native-control {\r\n    width: 0;\r\n}\r\n\r\n.tb-rpc-button .setting-name{\r\n    width: 100%;   \r\n}\r\n\r\n.tb-rpc-button .mat-divider.mat-divider-inset {\r\n    /*margin-left: 80px;*/\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n}\r\n\r\n.tb-rpc-button .mdc-list-item--disabled {\r\n    /*background-color: rgba(0,0,0,.1);*/\r\n    opacity: 0.2;\r\n}\r\n",
    "controllerScript": "// v.2.4, 2023-09-25 17:00\r\n\r\n// Based on Segment switch of string value\r\n\r\nlet valueSubscription;\r\n\r\nself.onInit = function() {\r\n    self.ctx.ngZone.run(function() {\r\n        init();\r\n        self.ctx.detectChanges(true);\r\n    });\r\n};\r\n\r\nfunction init() {\r\n    let utils = self.ctx.$scope.$injector.get(self.ctx\r\n        .servicesMap.get('utils'));\r\n    //let types       = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('types'));\r\n    //let toast       = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('toast'));\r\n    let translate = self.ctx.$scope.$injector.get(self.ctx\r\n        .servicesMap.get('translate'));\r\n    //let $q          = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('$q'));\r\n    let http = self.ctx.$scope.$injector.get(self.ctx\r\n        .servicesMap.get('http'));\r\n    let attributeService = self.ctx.$scope.$injector.get(\r\n        self.ctx.servicesMap.get('attributeService'));\r\n    let rpcUpdateStatus = {};\r\n    let settings = utils.deepClone(self.ctx.settings) || {};\r\n\r\n    self.ctx.$scope.toastTargetId = 'input-widget' + utils\r\n        .guid();\r\n    self.ctx.$scope.showTitle = settings.title && settings\r\n        .title.length ? true :\r\n        false; ////utils.defaultValue(settings.title, true);\r\n    self.ctx.$scope.title = settings.title;\r\n    self.ctx.$scope.convertedValue = 0;\r\n\r\n    // let stateParams = {};\r\n    // if (!self.ctx.isEdit && self.ctx.stateController) {\r\n    //     stateParams = self.ctx.stateController\r\n    //         .getStateParams();\r\n    // }\r\n    let widgetContext = self.ctx;\r\n\r\n    let convertRetrievedValueFunction = (retrievedValue) =>\r\n        retrievedValue; // Retrieved data\r\n    if (settings.convertRetrievedValueFunction && settings\r\n        .convertRetrievedValueFunction.length) {\r\n        try {\r\n            convertRetrievedValueFunction = new Function(\r\n                'retrievedValue', settings\r\n                .convertRetrievedValueFunction);\r\n        } catch (e) {\r\n            convertRetrievedValueFunction = (\r\n                retrievedValue) => retrievedValue;\r\n        }\r\n    }\r\n\r\n    //self.ctx.$scope.settingList = settings.settingList;\r\n    self.ctx.$scope.settingList = [];\r\n    for (const item of settings.settingList) {\r\n        self.ctx.$scope.settingList.push({\r\n            \"icon\": item.icon,\r\n            \"text\": item.text,\r\n            \"isDisabledFunc\": new Function(\r\n                'convertedValue', item\r\n                .isDisabledFunc),\r\n            \"customActionFunc\": new Function(\r\n                'convertedValue', 'widgetContext',\r\n                'openRightLayout', item\r\n                .customActionFunc)\r\n        });\r\n    }\r\n\r\n    let lastAttrValue = {}; //let lastAttrValue;\r\n    function onDataUpdatedForSubscribe(subscription,\r\n        apply) {\r\n        let convertedValue;\r\n\r\n        for (let i = 0; subscription.data && i <\r\n            subscription.data.length; i++) {\r\n            let keyName = subscription.data[i].dataKey.name;\r\n            if (subscription.data[i].data && subscription\r\n                .data[i].data.length > 0) {\r\n                let KeyValue = subscription.data[i].data[0][1];\r\n                //if (settings.retrievedAttributeKey && keyName === settings.retrievedAttributeKey) {\r\n                    try {\r\n                        convertedValue = convertRetrievedValueFunction(KeyValue); ////angular.fromJson(newValue)\r\n                    } catch (e) {\r\n                        self.ctx.$scope.error =\r\n                            'convertRetrievedValueFunction(value) error!'\r\n                    }\r\n                    //if (typeof KeyValue === 'number' && isFinite(KeyValue)) {\r\n                    //    convertedValue = KeyValue;\r\n                    //}\r\n                //} else {\r\n                //    console.log(\"unkown data:subscription.data[%d]\", i);\r\n                //    console.log(subscription.data[i]);\r\n                //}\r\n            }\r\n        }\r\n\r\n        if (convertedValue) {\r\n            self.ctx.$scope.convertedValue =\r\n                convertedValue; //String(convertedValue);\r\n            //refreshTextColor();\r\n        }\r\n\r\n        if (apply) {\r\n            self.ctx\r\n                .detectChanges(); //self.ctx.$scope.$digest();\r\n        }\r\n    }\r\n\r\n    function onDataUpdateErrorForSubscribe(subscription,\r\n        e) {\r\n        var exceptionData = utils.parseException(e);\r\n        var errorText = exceptionData.name;\r\n        if (exceptionData.message) {\r\n            errorText += ': ' + exceptionData.message;\r\n        }\r\n        self.ctx.$scope.error = errorText;\r\n        console.log(\r\n            \"onDataUpdateErrorForSubscribe(): errorText=\",\r\n            errorText);\r\n    }\r\n\r\n    function subscribeAttributes(type, entityType, entityId,\r\n        key) { //retrievedMethod,\r\n        var valueSubscriptionInfo = [{\r\n            type: type,\r\n            entityType: entityType,\r\n            entityId: entityId\r\n        }];\r\n\r\n        //if (retrievedMethod == 'attribute') {\r\n        valueSubscriptionInfo[0].attributes = [{\r\n            name: key\r\n        }];\r\n        //} else {\r\n        //    valueSubscriptionInfo[0].timeseries = [{name: key}];\r\n        //}\r\n\r\n        var subscriptionOptions = {\r\n            callbacks: {\r\n                onDataUpdated: onDataUpdatedForSubscribe,\r\n                onDataUpdateError: onDataUpdateErrorForSubscribe\r\n            }\r\n        };\r\n        self.ctx.subscriptionApi.createSubscriptionFromInfo(\r\n                'latest', valueSubscriptionInfo,\r\n                subscriptionOptions, false, true)\r\n            .subscribe( //types.widgetType.latest.value\r\n                (subscription) => {\r\n                    valueSubscription = subscription;\r\n                }\r\n            );\r\n    }\r\n\r\n    function subscribeTimeseries(type, entityType, entityId,\r\n        key) { //retrievedMethod,\r\n        var valueSubscriptionInfo = [{\r\n            type: type,\r\n            entityType: entityType,\r\n            entityId: entityId\r\n        }];\r\n\r\n        //if (retrievedMethod == 'attribute') {\r\n        //    valueSubscriptionInfo[0].attributes = [{name: key}];\r\n        //} else {\r\n        valueSubscriptionInfo[0].timeseries = [{\r\n            name: key\r\n        }];\r\n        //}\r\n\r\n        var subscriptionOptions = {\r\n            callbacks: {\r\n                onDataUpdated: onDataUpdatedForSubscribe,\r\n                onDataUpdateError: onDataUpdateErrorForSubscribe\r\n            }\r\n        };\r\n        self.ctx.subscriptionApi.createSubscriptionFromInfo(\r\n                'latest', valueSubscriptionInfo,\r\n                subscriptionOptions, false, true)\r\n            .subscribe( //types.widgetType.latest.value\r\n                (subscription) => {\r\n                    valueSubscription = subscription;\r\n                }\r\n            );\r\n    }\r\n\r\n\r\n    // RPC retrieved value\r\n    function rpcRetrievedValue(method, timeout) {\r\n        if (method && method.length) {\r\n            self.ctx.$scope.error = '';\r\n            self.ctx.controlApi.sendTwoWayCommand(method,\r\n                null, timeout).subscribe(\r\n                function success(responseBody) {\r\n                    ////self.ctx.$scope.convertedValue = responseBody;\r\n                    self.ctx.$scope.convertedValue =\r\n                        convertRetrievedValueFunction(\r\n                            responseBody);\r\n\r\n                    ////self.ctx.$scope.$digest(); // Error: $digest already in progress\r\n                },\r\n                function fail() {\r\n                    self.ctx.$scope.error = self.ctx\r\n                        .defaultSubscription\r\n                        .rpcErrorText;\r\n                }\r\n            );\r\n        } else {\r\n            self.ctx.$scope.error =\r\n                \"retrievedRPCMethodName is null.\";\r\n        }\r\n    }\r\n\r\n    self.ctx.$scope.isDsiabledListOption = function(index) {\r\n        //console.log(\"isDsiabledListOption()\", index);\r\n        //if (self.ctx.$scope.settingList[index].isDisabledFunc) {\r\n        return self.ctx.$scope.settingList[index]\r\n            .isDisabledFunc(self.ctx.$scope\r\n                .convertedValue);\r\n        //}\r\n    }\r\n    self.ctx.$scope.listSelectionChange = function(index) {\r\n        //console.log(\"listSelectionChange()\", index);\r\n        self.ctx.$scope.settingList[index]\r\n            .customActionFunc(self.ctx.$scope\r\n                .convertedValue, widgetContext, false);\r\n    }\r\n\r\n    // retrieved value\r\n    var firstRetrieveValue = true;\r\n    function retrieveValue() {\r\n        let rpcEnabled = self.ctx.defaultSubscription\r\n            .rpcEnabled;\r\n        let isSimulated = self.ctx.$scope.widgetEditMode;\r\n        if (!rpcEnabled) {\r\n            self.ctx.$scope.error =\r\n                'Target device is not set!';\r\n        } else {\r\n            if (!isSimulated) {\r\n                if (settings.retrievedMethod == 'rpc') {\r\n                    rpcRetrievedValue(settings\r\n                        .retrievedRPCMethodName,\r\n                        settings.requestTimeout);\r\n                } else if (settings.retrievedMethod ==\r\n                    'attribute') {\r\n                    if (firstRetrieveValue) {\r\n                        subscribeAttributes(\r\n                            \"entity\", // types.datasourceType.entity, in types.constant.js\r\n                            \"DEVICE\", //types.entityType.device, in types.constant.js\r\n                            self.ctx.defaultSubscription\r\n                            .targetDeviceId,\r\n                            //settings.retrievedMethod, \r\n                            settings\r\n                            .retrievedAttributeKey);\r\n                    }\r\n                } else if (settings.retrievedMethod ==\r\n                    'timeseries') {\r\n                    if (firstRetrieveValue) {\r\n                        subscribeTimeseries(\r\n                            \"entity\", // types.datasourceType.entity, in types.constant.js\r\n                            \"DEVICE\", //types.entityType.device, in types.constant.js\r\n                            self.ctx.defaultSubscription\r\n                            .targetDeviceId,\r\n                            //settings.retrievedMethod, \r\n                            settings\r\n                            .retrievedTimeseriesKey);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        firstRetrieveValue = false;\r\n    }\r\n\r\n    retrieveValue();\r\n}\r\n\r\nself.onResize = function() {};\r\n\r\nself.onDestory = function() {\r\n    if (valueSubscription) {\r\n        self.ctx.subscriptionApi.removeSubscription(\r\n            valueSubscription.id);\r\n    }\r\n};\r\n\r\n/*self.onDataUpdated = function() {\r\n    try{\r\n        self.ctx.$scope.convertedValue = self.ctx.data[0].data[0][1];\r\n        self.ctx.$scope.$digest();\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}*/\r\n\r\n/*self.typeParameters = function() {\r\n    return {\r\n        maxDatasources: 1, // Maximum allowed datasources for this widget, -1 - unlimited\r\n        maxDataKeys: 1 //Maximum allowed data keys for this widget, -1 - unlimited\r\n    }\r\n};*/",
    "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"title\": {\n                \"title\": \"Widget title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n\n            \"retrievedMethod\": {\n                \"title\": \"Retrieve value using method\",\n                \"type\": \"string\",\n                \"default\": \"rpc\"\n            },\n            \"retrievedAttributeKey\": {\n                \"title\": \"Retrieved Attribute key\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"retrievedTimeseriesKey\": {\n                \"title\": \"Retrieved Timeseries key\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"retrievedRPCMethodName\": {\n                \"title\": \"Retrieved value using server-side RPC method name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 5000\n            },\n            \"convertRetrievedValueFunction\": {\n                \"title\": \"Function body to parse retrieved value, f(retrievedValue)\",\n                \"type\": \"string\",\n                \"default\": \"return retrievedValue; //return true;\"\n            },\n\n            \"settingList\": {\n                \"type\": \"array\",\n                \"title\": \"Setting items\",\n                \"minItems\": 1,\n                \"maxItems\": 30,\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"icon\": {\n                            \"title\": \"Material icon, e.g., ac_unit, timer, settings and build.\",\n                            \"type\": \"string\",\n                            \"default\": \"settings\"\n                        },\n                        \"text\": {\n                            \"title\": \"Text\",\n                            \"type\": \"string\",\n                            \"default\": \"\"\n                        },\n                        \"isDisabledFunc\": {\n                            \"title\": \"Method body to detect if it is disabled, f(convertedValue), returns true or false\",\n                            \"type\": \"string\",\n                            \"default\": \"return false; //console.log(convertedValue);\"\n                        },\n                        \"customActionFunc\": {\n                            \"title\": \"Method body to action, f(convertedValue, widgetContext, openRightLayout)\",\n                            \"type\": \"string\",\n                            \"default\": \"//self.ctx.stateController.openState(state_id, widgetContext, openRightLayout); //self.ctx.stateController.updateState(...);\"\n                        }\n                    },\n                    \"required\": [\n                        \"text\",\n                        \"isDisabledFunc\",\n                        \"customActionFunc\"\n                    ]\n                }\n            }\n        },\n\n        \"required\": [\n            \"retrievedMethod\",\n            \"convertRetrievedValueFunction\",\n            \"settingList\"\n        ]\n    },\n    \"form\": [\n        \"title\",\n\n        {\n            \"key\": \"retrievedMethod\",\n            \"type\": \"rc-select\",\n            \"multiple\": false,\n            \"items\": [{\n                    \"value\": \"none\",\n                    \"label\": \"Don't retrieve\"\n                },\n                {\n                    \"value\": \"attribute\",\n                    \"label\": \"Subscribe for attribute\"\n                },\n                {\n                    \"value\": \"timeseries\",\n                    \"label\": \"Subscribe for timeseries\"\n                },\n                {\n                    \"value\": \"rpc\",\n                    \"label\": \"Call server-dide RPC to get value\"\n                }\n            ]\n        },\n        {\n            \"key\": \"retrievedAttributeKey\",\n            \"condition\": \"model.retrievedMethod === 'attribute' || model.retrievedMethod === 'SHARED_SCOPE' || model.retrievedMethod === 'SERVER_SCOPE'\"\n        },\n        {\n            \"key\": \"retrievedTimeseriesKey\",\n            \"condition\": \"model.retrievedMethod === 'timeseries'\"\n        },\n        {\n            \"key\": \"retrievedRPCMethodName\",\n            \"condition\": \"model.retrievedMethod === 'rpc'\"\n        },\n        {\n            \"key\": \"requestTimeout\",\n            \"condition\": \"model.retrievedMethod === 'rpc'\"\n        },\n        {\n            \"key\": \"convertRetrievedValueFunction\",\n            \"type\": \"javascript\"\n        },\n        {\n            \"type\": \"help\",\n            \"description\": \"<I><small>Note: The above are the params related to retrieve value from device.</small></I>\"\n        },\n\n        {\n            \"key\": \"settingList\",\n            \"add\": \"New\",\n            \"style\": {\n                \"add\": \"btn-success\"\n            },\n            \"items\": [\n                \"settingList[].icon\",\n                {\n                    \"type\": \"help\",\n                    \"description\": \"<I><small>Note: refer to https://mui.com/material-ui/material-icons for more information about material-icons.</small></I>\"\n                },\n                \"settingList[].text\",\n                {\n                    \"key\": \"settingList[].isDisabledFunc\",\n                    \"type\": \"javascript\"\n                },\n                {\n                    \"type\": \"help\",\n                    \"description\": \"<I><small>Note: return true to display this item, return false to not display.</small></I>\"\n                },\n                {\n                    \"key\": \"settingList[].customActionFunc\",\n                    \"type\": \"javascript\"\n                },\n                {\n                    \"type\": \"help\",\n                    \"description\": \"<I><small>Note: Update state, open state, or open new dashboard.</small></I>\"\n                }\n            ]\n        }\n    ]\n}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px 10px\",\"settings\":{\"requestTimeout\":500,\"convertRetrievedValueFunction\":\"return retrievedValue;\",\"settingList\":[{\"icon\":\"date_range\",\"isShowFunc\":\"return true; //console.log(convertedValue);\",\"text\":\"Date\",\"isDisabledFunc\":\"return false; //console.log(convertedValue);\",\"customActionFunc\":\"//self.ctx.stateController.openState(state_id, stateParams, openRightLayout); //self.ctx.stateController.updateState(...);\"},{\"icon\":\"timer\",\"isShowFunc\":\"return true; //console.log(convertedValue);\",\"customActionFunc\":\"//self.ctx.stateController.openState(state_id, stateParams, openRightLayout); //self.ctx.stateController.updateState(...); \",\"text\":\"Time\",\"isDisabledFunc\":\"return false; //console.log(convertedValue);\"}],\"retrievedMethod\":\"rpc\",\"retrievedRPCMethodName\":\"getValue\"},\"title\":\"Setting list\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
  }
}